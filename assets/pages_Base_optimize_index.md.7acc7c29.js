import{_ as e,o as t,c as a,X as o}from"./chunks/framework.b431710b.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/Base/optimize/index.md","filePath":"pages/Base/optimize/index.md","lastUpdated":1694597404000}'),p={name:"pages/Base/optimize/index.md"},r=o('<h2 id="_00-前端性能的分析" tabindex="-1">00-前端性能的分析 <a class="header-anchor" href="#_00-前端性能的分析" aria-label="Permalink to &quot;00-前端性能的分析&quot;">​</a></h2><blockquote><h2 id="性能指标和优化目标之-加载" tabindex="-1">性能指标和优化目标之：加载 <a class="header-anchor" href="#性能指标和优化目标之-加载" aria-label="Permalink to &quot;性能指标和优化目标之：加载&quot;">​</a></h2></blockquote><h5 id="打开网站的初体验" tabindex="-1">打开网站的初体验 <a class="header-anchor" href="#打开网站的初体验" aria-label="Permalink to &quot;打开网站的初体验&quot;">​</a></h5><p>我们一打开淘宝网举例，按下F12 打开 浏览器调试模式：</p><p><img src="http://img.smyhvae.com/20210115_1601.png" alt="F12截图"></p><p>上图中，鼠标右键点击“刷新”图标（或者鼠标长按刷新图标，松开鼠标后），会弹出三个选项，我们选择最后一个选项“清空缓存并硬性重新加载”。</p><p>补充：这三个选项都是在调试模式下（按下F12弹出调试面板）才会出现的。</p><p>浏览器的DevTools初印象：</p><p><img src="https://img.smyhvae.com/20210115_1617.png" alt="devtools"></p><p>上图中，打开 chrome 调试工具，点开「设置」icon，下面的四个选项中，除了“Group by frame”之外，其他的三个选项都可以勾选上。</p><p>我们可以看到淘宝网站的一些指标：</p><ul><li>总资源量是 1.3M。</li><li>DOM加载完成时间（DOMContentLoaded）：511ms。这是一个很关键的指标。</li><li>其他资源的总加载时间是 1.05秒。</li></ul><p>我们再来对比一下京东的：</p><p><img src="http://img.smyhvae.com/20210116-1357.png" alt="京东"></p><h3 id="保存快照" tabindex="-1">保存快照 <a class="header-anchor" href="#保存快照" aria-label="Permalink to &quot;保存快照&quot;">​</a></h3><p>network里的信息挺多，我们可以将其保存下来，留着以后做分析、做对照。</p><p><img src="http://img.smyhvae.com/20210115-1723.png" alt=""></p><p>如上图所示，我们可以在 network 的空白处右键，选择“Save all as HAR with content”，将 network 信息保存为 <strong>HAR</strong>文件格式。</p><p><strong>HAR是一种标准的Web格式，用户保存性能测试的结果。里面的数据是json格式。</strong></p><p>我们可以使用第三方的 HAR 分析软件来打开 HAR 文件，比如：</p><ul><li><a href="https://toolbox.googleapps.com/apps/har_analyzer/?lang=zh-CN" target="_blank" rel="noreferrer">Google 提供的 HAR 分析器</a></li><li>Fiddler 抓包工具</li></ul><p>注意，HAR 文件包含了一些敏感信息：</p><p><img src="http://img.smyhvae.com/20210115-1733.png" alt=""></p><h3 id="瀑布图-waterfall" tabindex="-1">瀑布图 Waterfall <a class="header-anchor" href="#瀑布图-waterfall" aria-label="Permalink to &quot;瀑布图 Waterfall&quot;">​</a></h3><p><img src="http://img.smyhvae.com/20210115_1618.png" alt=""></p><p>瀑布图可以非常直观地把网站的加载过程，用自上而下的方式表达出来，就像瀑布一样。</p><p>瀑布图有两中解读方式：一种是横向看，一种是纵向看。</p><p><strong>1、横向看</strong>：</p><p>横向看的是具体的资源，每一行代表某个资源的加载信息。里面有一些色块来表达加载的过程，每个块的颜色不同。也就是说资源的下载不是单一的过程，而是经历了很多环节。</p><p>为了了解资源的具体加载过程，我们把鼠标悬浮在第一个资源的色块上，可以看见一个详情列表：</p><p><img src="http://img.smyhvae.com/20210115_1632.png" alt=""></p><p>（1）等待：</p><ul><li>Queueing：排队。浏览器会对资源的请求做优先级排序。</li></ul><p>（2）连接：</p><ul><li>DNS Lookup：DNS域名解析。每个资源都有域名，对域名做DNS解析，然后找到对应服务器的IP地址。</li><li>initial connection：客户端和服务器之间建立TCP连接。</li><li>SSL证书：该网站为了保证安全性，使用了 https 协议，启用了SSL证书。启用之后，需要做安全认证（SSL协商），这个过程也会耗时。到这里位置，我们可以看到，在请求资源之前，有很多的前置步骤。</li></ul><p>（3）请求和响应：</p><ul><li>Request sent：到这一步，真正开始请求资源。</li><li>Waiting（<strong>TTFB</strong>）：资源从请求到响应，有一个等待的时间。</li><li>Content Download：收到响应后，资源的下载时间。如果值越大，表明下载时间越长。有些同步加载的资源会造成阻塞，导致网页的整体加载时间过长，让用户等待太久。</li></ul><p><strong>TTFB</strong> 是一个很重要的指标，它表示的是：请求发出到响应，到底要经历多久。TTFB 可以给我们一个很直观的感受，我们网站的请求和响应到底是快还是慢，很大程度上是由 TTFB 决定。</p><p>影响 TTFB 的因素是什么呢？比如：</p><ul><li>后台的处理能力的响应速度。</li><li>网络状况：是否有网络延迟。</li></ul><p><strong>2、纵向看</strong>：（主要看两点）</p><p>（1）看资源与资源之间的联系：如果发生阻塞，说明资源可能是串行地按顺序加载。可以<strong>按需要适当调整为并行</strong>。</p><p>（2）看关键的时间节点。Waterfall 中有<strong>两根时间线</strong>：蓝色的线是 DOM 加载完成的时间，红色的线是所有资源加载完成的时间。</p><h2 id="性能指标和优化目标之-交互" tabindex="-1">性能指标和优化目标之：交互 <a class="header-anchor" href="#性能指标和优化目标之-交互" aria-label="Permalink to &quot;性能指标和优化目标之：交互&quot;">​</a></h2><p>上面的内容讲的是<strong>加载</strong>的性能，还有一个需要关注的性能指标是<strong>交互</strong>。也就是网站加载完成后，用户真正开始使用这个网站过程中的的交互体验。</p><p>关于交互体验的性能，我们需要关注的是：</p><ul><li>交互动作的<strong>响应时间</strong>要短：比如点击按钮后的弹窗、在搜索框里输入关键字后的搜索结果。</li><li>页面滚动要流畅：可以查看 FPS 帧率。</li><li>异步请求接口的完成时间要短：比如关注/取关主播的响应、领取红包的操作。</li></ul><h3 id="fps帧率、frs" tabindex="-1"><a href="https://web.qianguyihao.com/14-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/01-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E5%92%8C%E6%8C%87%E6%A0%87.html#fps%E5%B8%A7%E7%8E%87%E3%80%81frs" target="_blank" rel="noreferrer">#</a>FPS帧率、FRS <a class="header-anchor" href="#fps帧率、frs" aria-label="Permalink to &quot;[#](https://web.qianguyihao.com/14-前端性能优化/01-前端性能分析工具和指标.html#fps帧率、frs)FPS帧率、FRS&quot;">​</a></h3><p>这里首先科普两个概念：</p><ul><li>刷新率：显示器每秒有多少帧画面。大多数显示器的刷新率是60帧/秒（即60hz）。</li><li>帧率（FPS：frames per second）：视频或者动画的内容本身，每秒有多少帧。由显卡输出帧率。</li></ul><p>上面的两个参数中，不要把「刷新率」和「帧率」弄混了。「刷新率」是屏幕的参数，「帧率」是图像、视频等内容的参数。人眼最终看到的效果，是以最低的参数为准的。</p><p>目前，市场主流手机和电脑屏幕的刷新率基本都是60Hz，即每秒显示60帧画面。也就是说，当我们在使用手机的时候，本质上是手机在连续播放一张张静态图片，每秒播放60张，让肉眼误认为眼前的画面在动。</p><p>持续滑动的过程中，如果页面输出到显示器的帧率低于60帧/秒，则人眼会感觉卡顿。</p><p>那么，在浏览器中如何实时显示内容的 FPS 参数呢？打开浏览器的控制台后，按住快捷键「Cmd + Shift + P」，然后输入 <code>frame</code>，选择<code>Show frames per second（FPS） meter</code>。如下：</p><p><img src="http://img.smyhvae.com/20210115-1930.png" alt="img"></p><p><img src="http://img.smyhvae.com/20210115-2146.png" alt="img"></p><p><strong>温馨提示</strong>：</p><p>从 2020年7月起，chrome 官方已经取消了 fps参数的显示，改为了 <a href="https://twitter.com/addyosmani/status/1281483292026400768" target="_blank" rel="noreferrer">FRS</a>：</p><p><img src="http://img.smyhvae.com/20210115-2006.png" alt="img"></p><p>FRS参数观察的是丢帧率：</p><p><img src="http://img.smyhvae.com/20210115-2010.png" alt="img"></p><p>Chrome官方给我们提供了下面这个网站，用于观察 FPS 效果：</p><ul><li><a href="http://googlesamples.github.io/web-fundamentals/tools/chrome-devtools/rendering-tools/forcedsync.html" target="_blank" rel="noreferrer">http://googlesamples.github.io/web-fundamentals/tools/chrome-devtools/rendering-tools/forcedsync.html</a></li></ul><p>如果实在想要看fps，我们可以借助第三方的 <a href="https://web.qianguyihao.com/14-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/01-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E5%92%8C%E6%8C%87%E6%A0%87.html" target="_blank" rel="noreferrer">chrome 插件</a>来查看 fps参数。</p>',64),l=[r];function i(s,n,h,m,g,c){return t(),a("div",null,l)}const f=e(p,[["render",i]]);export{u as __pageData,f as default};
