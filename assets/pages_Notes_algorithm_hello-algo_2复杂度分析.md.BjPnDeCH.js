import{_ as s,c as i,o as a,a5 as n}from"./chunks/framework.Svq8VKyI.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/Notes/algorithm/hello-algo/2复杂度分析.md","filePath":"pages/Notes/algorithm/hello-algo/2复杂度分析.md","lastUpdated":1710085005000}'),l={name:"pages/Notes/algorithm/hello-algo/2复杂度分析.md"},e=n(`<h3 id="复杂度分析" tabindex="-1">复杂度分析 <a class="header-anchor" href="#复杂度分析" aria-label="Permalink to &quot;复杂度分析&quot;">​</a></h3><h4 id="递归与迭代" tabindex="-1">递归与迭代 <a class="header-anchor" href="#递归与迭代" aria-label="Permalink to &quot;递归与迭代&quot;">​</a></h4><blockquote><p><strong>所有的递归都能被写成迭代</strong> 给定一个斐波那契数列 (0, 1, 1, 2, 3, 5, 8, 13, \\dots) ，求该数列的第 (n) 个数字。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fibonacciSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fibonacciSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fibonacciSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></blockquote><h4 id="函数渐进上界" tabindex="-1">函数渐进上界 <a class="header-anchor" href="#函数渐进上界" aria-label="Permalink to &quot;函数渐进上界&quot;">​</a></h4><ul><li>根据临界条件设立 判断条件 达到时间复杂度尽可能低的效果</li></ul><h4 id="时间复杂度" tabindex="-1">时间复杂度 <a class="header-anchor" href="#时间复杂度" aria-label="Permalink to &quot;时间复杂度&quot;">​</a></h4><ul><li><p>计算时间复杂度</p><ul><li>忽略常数项</li><li>忽略系数</li><li>嵌套时使用乘机</li></ul></li><li><p>时间复杂度常见类型</p><ul><li>常数阶O(1)</li><li>线性阶O(n)</li><li>平方阶O(n²)</li><li>指数阶O(2^n)</li><li>对数阶O(log n）</li><li>线性对数阶O(n log n)</li><li>阶乘阶O(n!) 例如：求前n项积</li></ul></li></ul>`,7),t=[e];function h(p,r,k,d,o,c){return a(),i("div",null,t)}const u=s(l,[["render",h]]);export{g as __pageData,u as default};
