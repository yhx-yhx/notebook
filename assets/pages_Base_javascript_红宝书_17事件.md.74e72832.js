import{_ as s,o as l,c as n,X as a}from"./chunks/framework.0f723ccb.js";const p="/notebook/assets/image-20230911154759978.7a9e6f95.png",o="/notebook/assets/image-20230911154824643.530e994a.png",d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/Base/javascript/红宝书/17事件.md","filePath":"pages/Base/javascript/红宝书/17事件.md","lastUpdated":1696949003000}'),e={name:"pages/Base/javascript/红宝书/17事件.md"},t=a(`<h3 id="_17事件" tabindex="-1">17事件 <a class="header-anchor" href="#_17事件" aria-label="Permalink to &quot;17事件&quot;">​</a></h3><blockquote><p>事件仅在发生时执行的<strong>监听器</strong>（<strong>处理程序</strong> or <strong>观察者模式</strong>）订阅事件</p></blockquote><h4 id="事件流" tabindex="-1">事件流 <a class="header-anchor" href="#事件流" aria-label="Permalink to &quot;事件流&quot;">​</a></h4><ul><li>概念：描述了页面接受事件的顺序</li><li>事件冒泡【有具体到模糊】 <ul><li>事件冒泡 事件绑定在一个<strong>文档的具体元素上</strong>面（文档得很深层）开始<strong>触发不断地向上蔓延传播</strong> 的过程；</li></ul></li><li>事件捕获【有模糊到具体】 <ul><li>事件捕获 最不具体的事件上 先收到事件，而最具体的时间爱你上最后收到事件</li><li>实际上 为了事件<strong>在完成最终目标前拦截</strong></li></ul></li><li>DOM事件流 <ul><li>DOM2Event 规范规定了事件流分为3个阶段：<strong>事件捕获、到达目标、事件冒泡</strong><ul><li>事件捕获的提前发生 为 提前拦截提供了可能</li><li>现代浏览器 都支持DOM事流，IE8及更早不支持</li></ul></li></ul></li></ul><h4 id="事件处理程序" tabindex="-1">事件处理程序 <a class="header-anchor" href="#事件处理程序" aria-label="Permalink to &quot;事件处理程序&quot;">​</a></h4><ul><li><p>为响应事件 而调用的函数 被称为 <strong>事件监听器</strong></p></li><li><p>HTML事件处理程序</p><ul><li>event事件</li><li>this</li><li>在html指定的事件处理程序 有些问题 <ul><li>时机问题 可能html元素显示到页面上时 监听函数 无法执行</li><li>事件处理程序作用域链 的扩展 不同浏览器中导致不同的结果；不同JavaScript引擎 中的标志符 解析规则存在差异，因此在无限定访问 对象成员时可能导致错误</li><li>HTML与 JavaScript强耦合 有改动 需要在 html与 JavaScript 种都做修改</li></ul></li></ul></li><li><p>DOM0事件处理程序</p><ul><li>例如onclick 写法</li><li>事件处理程序会在元素作用于中进行，因此<strong>this指向的是该元素本身</strong></li><li>以这种方式添加的事件处理程序 是<strong>注册在事件流的冒泡阶段</strong></li><li>移出时间处理程序 xx.onclick = null</li></ul></li><li><p>DOM2事件处理程序</p><ul><li>DOM2Event 为事件处理程序赋值和移除定义了两个方法 addEventListener 和 removeEventListener</li><li>参数 接受3个参数 事件名、事件处理函数、事件处理阶段（bool），<strong>true 捕获阶段</strong>调用处理程序 ；<strong>false 冒泡阶段</strong></li><li>优势<strong>可以为同一事件添加多个事件处理程序</strong></li><li><strong>匿名函数无法移出</strong></li><li><strong>removeEventListener 出入同样的值 来实现移除事件</strong></li><li>如果 不需要拦截，则不使用事件捕获 ，事件冒泡触发具有更好的兼容性</li></ul></li><li><p>IE事件处理程序 【冒泡阶段触发】</p><ul><li><p>IE8 及更早版本只支持冒泡触发</p></li><li><p>使用attachEvent 与 detchEvent 参数 事件处理程序名称、事件处理函数</p></li><li><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> btn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelecter</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Btn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//添加事件处理函数</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> handler </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ()</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;{</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Clicked</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">}</span></span>
<span class="line"><span style="color:#F07178;">btn.attachEvent(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">onclick</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">handler) </span><span style="color:#676E95;font-style:italic;">//第一个参数带有 &quot;onclick&quot;, this指向window</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//移除事件处理函数</span></span>
<span class="line"><span style="color:#A6ACCD;">btn.detchEvent(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">onclick</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">handler)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>同样支持 给定多个事件处理程序</p></li></ul></li><li><p>跨浏览器事件处理程序</p><ul><li>实现跨浏览器时间处理程序 依赖于能力检测</li><li>确保浏览器最大限度的兼容 只需 事件处理在 冒泡阶段执行</li></ul></li></ul><h4 id="事件对象" tabindex="-1">事件对象 <a class="header-anchor" href="#事件对象" aria-label="Permalink to &quot;事件对象&quot;">​</a></h4><ul><li><p>event 对象 所有浏览器都是支持的</p></li><li><p>DOM事件对象</p><p><img src="`+p+'" alt="image-20230911154759978"></p></li></ul><p><img src="'+o+`" alt="image-20230911154824643"></p><ul><li><p>在事件处理内部，this始终指向等于 currentTarget的值，target 只包含事件的实际目标；</p><ul><li><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">currentTarget</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#F07178;">)</span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">consple</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">documnet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">))</span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// event.target 触发元素</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// event.currentTarget 事件处理程序注册的元素</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// this 事件处理程序注册的元素</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul></li><li><p>event.type 一个处理程序触发多个事件时很有用</p></li><li><p>preventDefault() 方法用于阻止默认行为 ，取消默认事件行为后，对象的cancelable属性都会设为true</p></li><li><p>stopPropagtion()方法用于立即阻止时间的传播 取消连续的时间捕获 冒泡，仅触发到该元素才会执行事件处理程序 可以阻止documnet.body 注册的事件处理程序的执行</p></li><li><p>502 md 又困又累 明个在看看</p></li></ul>`,10),r=[t];function c(i,y,D,F,u,A){return l(),n("div",null,r)}const g=s(e,[["render",c]]);export{d as __pageData,g as default};
