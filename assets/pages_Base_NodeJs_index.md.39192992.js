import{_ as s,o as a,c as l,X as n}from"./chunks/framework.b431710b.js";const e="/notebook/assets/循环加载-require.75748a22.png",o="/notebook/assets/CMD-seajs.304ac527.png",F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/Base/NodeJs/index.md","filePath":"pages/Base/NodeJs/index.md","lastUpdated":1694770216000}'),p={name:"pages/Base/NodeJs/index.md"},t=n(`<h3 id="node-js" tabindex="-1">node.js <a class="header-anchor" href="#node-js" aria-label="Permalink to &quot;node.js&quot;">​</a></h3><h4 id="repl-read-eval-print-loop" tabindex="-1">REPL read-eval-print-Loop <a class="header-anchor" href="#repl-read-eval-print-loop" aria-label="Permalink to &quot;REPL  read-eval-print-Loop&quot;">​</a></h4><h4 id="node程序传递参数" tabindex="-1">Node程序传递参数 <a class="header-anchor" href="#node程序传递参数" aria-label="Permalink to &quot;Node程序传递参数&quot;">​</a></h4><ul><li><p>执行 node程序</p><ul><li>node index.js</li></ul></li><li><p>传递参数 通过process 来获取</p><ul><li><p>node index.js env=development xxx</p></li><li><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">argv[</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">])</span><span style="color:#676E95;font-style:italic;">//{env:development}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">argv[</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]) </span><span style="color:#676E95;font-style:italic;">//xxxx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">weweewew</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">trace</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">//打印函数调用栈</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul></li></ul><h4 id="node全局对象" tabindex="-1">Node全局对象 <a class="header-anchor" href="#node全局对象" aria-label="Permalink to &quot;Node全局对象&quot;">​</a></h4><ul><li>process / console / 定时器 setTimeout setInterval setImmediate</li><li>clearInterval clearTimeout clearImmediate 对应的清除事件</li><li>process.nextTick <ul><li>下个进程执行</li></ul></li><li>setImmediate <ul><li>立即执行</li></ul></li></ul><h4 id="特殊的全局对象【模块对象】" tabindex="-1">特殊的全局对象【模块对象】 <a class="header-anchor" href="#特殊的全局对象【模块对象】" aria-label="Permalink to &quot;特殊的全局对象【模块对象】&quot;">​</a></h4><p><strong>dirname / filename / require /export</strong></p><blockquote><p>不可以在repl 中使用</p></blockquote><ul><li><strong>__dirname</strong><ul><li>当前文件所在目录名称</li></ul></li><li><strong>__filename</strong><ul><li>当前文件所在目录名称</li></ul></li></ul><h5 id="gobal与window的区别" tabindex="-1">gobal与window的区别 <a class="header-anchor" href="#gobal与window的区别" aria-label="Permalink to &quot;gobal与window的区别&quot;">​</a></h5><ul><li>node 定义变量不会被挂载到 gobal</li><li>window 定义全局变量 会被挂载到window ** process 挂载全局 通过 Object.defineProperty()实现**</li></ul><h3 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-label="Permalink to &quot;模块化&quot;">​</a></h3><blockquote><p>javascript 被称为 披着C语言外衣的 Lisp 人工智能方面 模块化规范 esModule AMD CMD node 模块化 基于 CMD 也是实现了 esModule</p></blockquote><h4 id="commonjs" tabindex="-1">CommonJs <a class="header-anchor" href="#commonjs" aria-label="Permalink to &quot;CommonJs&quot;">​</a></h4><blockquote><p>在浏览器之外使用的地方 【被称为serverJs】 在浏览器中使用 CJS【commonJs】 Node Browserify webpack 支持 CJS</p></blockquote><h5 id="规范核心变量" tabindex="-1">规范核心变量 <a class="header-anchor" href="#规范核心变量" aria-label="Permalink to &quot;规范核心变量&quot;">​</a></h5><ul><li>exports【没什么鸟用 为了迎合规范】 <ul><li><strong>exports === module.exports</strong></li><li>exports是 module.exports 的引用</li></ul></li><li>module.exports <ul><li>当 module.exports 定义为一个新的对象 将会开辟一个新的内存空间 则moudle.exports != exports</li><li>exports === module.exports</li></ul></li><li><strong>require</strong>【<em>加载过程同步的</em>】 <ul><li>path、 http 的核心模块【？】</li><li>以 ‘./’ or &#39;../&#39; or &#39;/&#39;【根目录】 开头 <ul><li>有后缀 直接找对应的文件</li><li>无后缀 找文件 X &gt; X.js &gt; X.json &gt; X.node 以此查找；</li><li>默认找 index.js &gt; index.json &gt;index.node</li><li>other <strong>报错</strong></li></ul></li><li>并不是一个核心模块 <ul><li>逐级往上查找 node_modules/xxx/index</li></ul></li><li><strong>多次加载 仅会加载一次【缓存】</strong></li><li>module.loaded 判断是否被加载了 boolean</li><li><img src="`+e+`" alt="循环加载-require"></li><li>按分支加载到 最底层 再查找其他分支【图结构】<strong>深度优先</strong>查找， 则是mian&gt;aaa&gt;ccc&gt;ddd&gt;eee&gt;bbb</li></ul></li><li>CommonJs缺陷 <ul><li>同步加载</li></ul></li></ul><h5 id="amd-【异步模块定义-async-module-define】" tabindex="-1">AMD 【异步模块定义 Async Module define】 <a class="header-anchor" href="#amd-【异步模块定义-async-module-define】" aria-label="Permalink to &quot;AMD 【异步模块定义 Async Module define】&quot;">​</a></h5><ul><li><p><strong>require.js</strong></p><ul><li><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./lib/require.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">data-main</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//加载完成 require.js 立即加载 index.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>index.js 定义 模块</p></li></ul></li></ul><h5 id="cmd-common-module-define" tabindex="-1">CMD[Common Module define] <a class="header-anchor" href="#cmd-common-module-define" aria-label="Permalink to &quot;CMD[Common Module define]&quot;">​</a></h5><blockquote><p>异步加载模块 【很少用】</p></blockquote><ul><li><a href="https://github.com/seajs/seajs" target="_blank" rel="noreferrer">seajs CMD实现库 gihub地址</a></li><li><img src="`+o+`" alt="image-20230915164903989"></li></ul><h5 id="es-module" tabindex="-1">ES Module <a class="header-anchor" href="#es-module" aria-label="Permalink to &quot;ES Module&quot;">​</a></h5><blockquote><p>export import 关键字</p><p><strong>自动采用严格模式</strong></p></blockquote><ul><li><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./modules/foo.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//modeule</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 导出</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//default可以 不写名称 导入名称可以是任意值</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">12</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//按需导出</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// {} 不是对象</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">foo</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">//导入</span></span>
<span class="line"><span style="color:#A6ACCD;">import { foo } from &quot;./foo&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">// 别名 </span></span>
<span class="line"><span style="color:#A6ACCD;">import { foo as name } from &quot;./foo&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">// * as </span></span>
<span class="line"><span style="color:#A6ACCD;">import  * as foo from &quot;./foo&quot;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>export 与 import 结合使用</p></li><li><p><code>export {name,xx,xxx} from &quot;pathxxx&quot; </code></p></li><li><p><code>先从pathxxx import {name,xx,xxx} 然后导出 {name,xx,xxx}</code></p></li><li><p>封装统一入口 比如 n多个 api.js 所有都在index.js 中做统一导出</p></li></ul><h6 id="import函数" tabindex="-1">import函数 <a class="header-anchor" href="#import函数" aria-label="Permalink to &quot;import函数&quot;">​</a></h6><ul><li></li></ul>`,28),r=[t];function i(c,d,u,m,D,y){return a(),l("div",null,r)}const C=s(p,[["render",i]]);export{F as __pageData,C as default};
