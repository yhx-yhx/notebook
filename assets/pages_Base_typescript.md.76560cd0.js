import{_ as s,o as a,c as n,X as e}from"./chunks/framework.b431710b.js";const h=JSON.parse('{"title":"typescript","description":"","frontmatter":{},"headers":[],"relativePath":"pages/Base/typescript.md","filePath":"pages/Base/typescript.md","lastUpdated":1695116047000}'),l={name:"pages/Base/typescript.md"},p=e(`<h1 id="typescript" tabindex="-1">typescript <a class="header-anchor" href="#typescript" aria-label="Permalink to &quot;typescript&quot;">​</a></h1><h2 id="全局安装typescript" tabindex="-1">全局安装typescript <a class="header-anchor" href="#全局安装typescript" aria-label="Permalink to &quot;全局安装typescript&quot;">​</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm i typescript -g</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">yarn add typescript;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="将ts转换成js" tabindex="-1">将ts转换成js <a class="header-anchor" href="#将ts转换成js" aria-label="Permalink to &quot;将ts转换成js&quot;">​</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">//建议  方便 便于监听 tsc  ==&gt;typescript complie</span></span>
<span class="line"><span style="color:#A6ACCD;">tsc xxx.ts -w</span></span>
<span class="line"><span style="color:#A6ACCD;">// 不建议 不方便</span></span>
<span class="line"><span style="color:#A6ACCD;">tsc xx.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="类型校验" tabindex="-1">类型校验 <a class="header-anchor" href="#类型校验" aria-label="Permalink to &quot;类型校验&quot;">​</a></h2><p>变量:类型；</p><h2 id="类型推断" tabindex="-1">类型推断 <a class="header-anchor" href="#类型推断" aria-label="Permalink to &quot;类型推断&quot;">​</a></h2><h3 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let num=12;</span></span>
<span class="line"><span style="color:#A6ACCD;">num=&#39;wewe&#39; //报错仅支持 类型为初识定义类型</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let array:(string|number)[]=[&#39;23&#39;,&quot;yhx&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="对象" tabindex="-1">对象 <a class="header-anchor" href="#对象" aria-label="Permalink to &quot;对象&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const obj = { name: &#39;true&#39;, sex: &#39;nan&#39;, state: true }</span></span>
<span class="line"><span style="color:#A6ACCD;">//限制类型</span></span>
<span class="line"><span style="color:#A6ACCD;">let hobj: { name: string, age: number, usl?: string } = {name:&#39;yhx&#39;,age:23}</span></span>
<span class="line"><span style="color:#A6ACCD;">//限制类型 ?：表示可选的字段</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="组合类型" tabindex="-1">组合类型 <a class="header-anchor" href="#组合类型" aria-label="Permalink to &quot;组合类型&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">//定义限制 hg为number或string的数组；</span></span>
<span class="line"><span style="color:#A6ACCD;">let hg: (number | string)[] = [&#39;12&#39;, 12]</span></span>
<span class="line"><span style="color:#A6ACCD;">//定义hb为number或string类型数组</span></span>
<span class="line"><span style="color:#A6ACCD;">let hb: number | string[]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">//初始化 tsconfig.json</span></span>
<span class="line"><span style="color:#A6ACCD;">tsc init</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">//编译将 ts转换成js</span></span>
<span class="line"><span style="color:#A6ACCD;">tsc -w</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-label="Permalink to &quot;类型&quot;">​</a></h3><h4 id="any" tabindex="-1">any <a class="header-anchor" href="#any" aria-label="Permalink to &quot;any&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">//任何类型 都ok 相当于用原生的js 定义变量</span></span>
<span class="line"><span style="color:#A6ACCD;">let anyy:any[]=[];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="any与unknown区别-as类型断言" tabindex="-1">any与unknown区别 as类型断言 <a class="header-anchor" href="#any与unknown区别-as类型断言" aria-label="Permalink to &quot;any与unknown区别  as类型断言&quot;">​</a></h4><p><strong>as类型断言</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let y: string = &#39;1&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">//将string转化成 unkown类型 接着转换成 number类型</span></span>
<span class="line"><span style="color:#A6ACCD;">let n: number = y as unknown as number</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="any与unknown的区别" tabindex="-1">any与unknown的区别 <a class="header-anchor" href="#any与unknown的区别" aria-label="Permalink to &quot;any与unknown的区别&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">//**any**定义类型为 所有类型均可赋值；</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">//**unknown**不知道是什么类型</span></span>
<span class="line"><span style="color:#A6ACCD;">let pp: any = &#39;123&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">let ps: unknown = &quot;1234444&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">//正确</span></span>
<span class="line"><span style="color:#A6ACCD;">let xml: string = pp  //any</span></span>
<span class="line"><span style="color:#A6ACCD;">//报错</span></span>
<span class="line"><span style="color:#A6ACCD;">let xml1:string=ps    //unknown</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="类型-void与-never" tabindex="-1">类型 void与 never <a class="header-anchor" href="#类型-void与-never" aria-label="Permalink to &quot;类型 void与 never&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">void 函数执行到结束</span></span>
<span class="line"><span style="color:#A6ACCD;">never  函数执行过程中必须断点？？？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="null与undefined类型" tabindex="-1">null与undefined类型 <a class="header-anchor" href="#null与undefined类型" aria-label="Permalink to &quot;null与undefined类型&quot;">​</a></h4><h4 id="type-对函数参数的声明" tabindex="-1">type 对函数参数的声明 <a class="header-anchor" href="#type-对函数参数的声明" aria-label="Permalink to &quot;type 对函数参数的声明&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">//定制参数规则</span></span>
<span class="line"><span style="color:#A6ACCD;">type userType = { name: string, sex: string, state?: boolean }</span></span>
<span class="line"><span style="color:#A6ACCD;">let ww = (user: userType) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(user) //{ name: &#39;yhx&#39;, sex: &#39;sss&#39; }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(ww({ name: &#39;yhx&#39;, sex: &#39;sss&#39; }));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="元组tuple" tabindex="-1">元组tuple <a class="header-anchor" href="#元组tuple" aria-label="Permalink to &quot;元组tuple&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let tuple: [string | number, number] = [&quot;hhh&quot;, 20];</span></span>
<span class="line"><span style="color:#A6ACCD;">tuple = [1, 2]</span></span>
<span class="line"><span style="color:#A6ACCD;">// console.log(tuple);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="枚举" tabindex="-1">枚举 <a class="header-anchor" href="#枚举" aria-label="Permalink to &quot;枚举&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">//枚举</span></span>
<span class="line"><span style="color:#A6ACCD;">enum sexType {</span></span>
<span class="line"><span style="color:#A6ACCD;">    BOY = &#39;男&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    GIRL = &quot;女&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">let user1 = {</span></span>
<span class="line"><span style="color:#A6ACCD;">    name: &#39;ddd&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    sex: 1</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(sexType.BOY);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="断言" tabindex="-1">断言 <a class="header-anchor" href="#断言" aria-label="Permalink to &quot;断言&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let suu = (...args): (string | number | object) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    return args</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">suu as object</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(suu(1, 2, 3, 4));</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">//as const    用的比较多</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="结构as-const" tabindex="-1">结构as const <a class="header-anchor" href="#结构as-const" aria-label="Permalink to &quot;结构as const&quot;">​</a></h4>`,38),r=[p];function i(t,o,c,u,b,d){return a(),n("div",null,r)}const C=s(l,[["render",i]]);export{h as __pageData,C as default};
