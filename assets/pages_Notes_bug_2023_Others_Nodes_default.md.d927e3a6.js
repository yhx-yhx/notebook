import{_ as s,j as n,k as a,V as e}from"./chunks/framework.5dd7d4b8.js";const l="/notebook/images/image-20230508133253015.png",m=JSON.parse('{"title":"geoservice  各种查询规则","description":"","frontmatter":{},"headers":[],"relativePath":"pages/Notes/bug/2023/Others/Nodes/default.md","filePath":"pages/Notes/bug/2023/Others/Nodes/default.md","lastUpdated":1706089342000}'),p={name:"pages/Notes/bug/2023/Others/Nodes/default.md"},o=e(`<h2 id="elementplus-plus-上传-upload组件-按钮级别上传显示-进度条" tabindex="-1">elementplus plus 上传 upload组件 按钮级别上传显示 进度条 <a class="header-anchor" href="#elementplus-plus-上传-upload组件-按钮级别上传显示-进度条" aria-label="Permalink to &quot;elementplus plus 上传 upload组件 按钮级别上传显示 进度条&quot;">​</a></h2><p>在 Element Plus 的 Upload 组件中，可以使用 <code>show-file-list</code> 和 <code>list-type</code> 属性来控制按钮级别的上传显示和进度调。</p><p>以下是一个示例，展示如何在 Element Plus 的 Upload 组件中实现按钮级别上传显示和进度调：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;template&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;el-upload</span></span>
<span class="line"><span style="color:#A6ACCD;">    action=&quot;/upload&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    :show-file-list=&quot;false&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    :list-type=&quot;listType&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    @progress=&quot;onProgress&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;el-button slot=&quot;trigger&quot; size=&quot;small&quot; type=&quot;primary&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      {{ buttonText }}</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;/el-button&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;/el-upload&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/template&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;script&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">export default {</span></span>
<span class="line"><span style="color:#A6ACCD;">  data() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    return {</span></span>
<span class="line"><span style="color:#A6ACCD;">      listType: &#39;text&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">      buttonText: &#39;点击上传&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    };</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">  methods: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    onProgress(event, file, fileList) {</span></span>
<span class="line"><span style="color:#A6ACCD;">      const percent = event.percent;</span></span>
<span class="line"><span style="color:#A6ACCD;">      console.log(\`文件上传进度: \${percent}%\`);</span></span>
<span class="line"><span style="color:#A6ACCD;">    },</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>在上述代码中，我们将 <code>show-file-list</code> 设置为 <code>false</code>，以隐藏默认的文件列表。然后，我们将 <code>list-type</code> 设置为 <code>text</code>，以显示按钮级别的上传显示。最后，我们将 <code>&lt;el-button&gt;</code> 插入 <code>&lt;el-upload&gt;</code> 并设置其 <code>slot</code> 为 <code>trigger</code>，这将在上传组件中显示自定义按钮。在 <code>progress</code> 事件中，我们添加了一个回调函数来处理上传进度，并记录每个文件的上传进度。</p><p>需要注意的是，在 <code>onProgress()</code> 函数中，我们使用 <code>console.log()</code> 打印上传进度。您也可以在该函数中执行其他操作，以根据需要自定义进度调。</p><p>希望这可以帮助您在 Element Plus 的 Upload 组件中实现按钮级别的上传显示和进度调。</p><h2 id="vite-打包清除-所有console-log-语句" tabindex="-1">vite 打包清除 所有console.log() 语句 <a class="header-anchor" href="#vite-打包清除-所有console-log-语句" aria-label="Permalink to &quot;vite 打包清除 所有console.log() 语句&quot;">​</a></h2><p>在 Vite 中，可以使用 <code>terser</code> 压缩工具和 <code>@rollup/plugin-replace</code> 插件来清除 <code>console.log()</code> 输出，并将其应用于所有 JavaScript 文件。</p><p>以下是一个示例，展示如何在 Vite 中通过配置使用压缩工具来清除 <code>console.log()</code> 输出：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// vite.config.js</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">import { defineConfig } from &#39;vite&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">import replace from &#39;@rollup/plugin-replace&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">import { terser } from &#39;rollup-plugin-terser&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">export default defineConfig({</span></span>
<span class="line"><span style="color:#A6ACCD;">  build: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    rollupOptions: {</span></span>
<span class="line"><span style="color:#A6ACCD;">      plugins: [</span></span>
<span class="line"><span style="color:#A6ACCD;">        replace({</span></span>
<span class="line"><span style="color:#A6ACCD;">          &#39;p<wbr>rocess.env.NODE_ENV&#39;: JSON.stringify(&#39;production&#39;),</span></span>
<span class="line"><span style="color:#A6ACCD;">          &#39;console.log(&#39;: &#39;/* removed */&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">        }),</span></span>
<span class="line"><span style="color:#A6ACCD;">        terser({</span></span>
<span class="line"><span style="color:#A6ACCD;">          compress: {</span></span>
<span class="line"><span style="color:#A6ACCD;">            drop_console: true, // 清除 console.log()</span></span>
<span class="line"><span style="color:#A6ACCD;">          },</span></span>
<span class="line"><span style="color:#A6ACCD;">        }),</span></span>
<span class="line"><span style="color:#A6ACCD;">      ],</span></span>
<span class="line"><span style="color:#A6ACCD;">    },</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>在上述代码中，我们在 <code>rollupOptions.plugins</code> 中添加了 <code>replace</code> 插件，用于替换所有 JavaScript 文件中的 <code>console.log()</code> 调用。具体而言，我们将 <code>console.log()</code> 替换为 <code>/* removed */</code> 以清除输出。然后，我们又添加了 <code>terser</code> 压缩器，其中设置了 <code>compress.drop_console: true</code> 来清除所有 <code>console.log()</code> 输入。</p><p>需要注意的是，清除 <code>console.log()</code> 可能会隐藏有用的调试信息，因此请在确定不需要时再将其清除。</p><p>希望这可以帮助您在 Vite 中清除 <code>console.log()</code> 输出并清空控制台。</p><h2 id="svg-这两个属性的作用-alignment-baseline-text-anchor" tabindex="-1">svg 这两个属性的作用 alignment-baseline text-anchor <a class="header-anchor" href="#svg-这两个属性的作用-alignment-baseline-text-anchor" aria-label="Permalink to &quot;svg 这两个属性的作用 alignment-baseline text-anchor&quot;">​</a></h2><p><code>alignment-baseline</code> 和 <code>text-anchor</code> 属性是用于对 SVG 中的文本元素进行对齐和定位的属性。</p><p><code>alignment-baseline</code> 属性指定文本元素与其所在容器的基准线之间的垂直对齐方式。具体取值包括：</p><ul><li><code>baseline</code>：默认，使得文字的基线与容器的基线对齐。</li><li><code>middle</code>：使得文字的中心点与容器的中心点对齐。</li><li><code>central</code>：使得文字的中心点与容器的中心点对齐（兼容旧版浏览器）等。</li></ul><p><code>text-anchor</code> 属性指定了文本元素的水平对齐方式。具体取值包括：</p><ul><li><code>start</code>：默认，使得文字的左侧与容器的左侧对齐。</li><li><code>middle</code>：使得文字的中心点与容器的中心点对齐。</li><li><code>end</code>：使得文字的右侧与容器的右侧对齐。</li></ul><p>以下示例展示如何使用这两个属性来居中放置 SVG 中的文本元素：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">svg&lt;svg width=&quot;300&quot; height=&quot;200&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;rect x=&quot;50&quot; y=&quot;50&quot; width=&quot;200&quot; height=&quot;100&quot; fill=&quot;#eee&quot; stroke=&quot;#ddd&quot;/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;text x=&quot;150&quot; y=&quot;100&quot; text-anchor=&quot;middle&quot; alignment-baseline=&quot;middle&quot;&gt;居中对齐&lt;/text&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/svg&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在上述代码中，我们使用 <code>text</code> 元素添加了一个居中对齐的文本。我们将 <code>text-anchor</code> 属性设置为 <code>middle</code>，使得文本水平居中对齐，然后将 <code>alignment-baseline</code> 属性设置为 <code>middle</code>，从而将自己与矩形元素垂直中心对齐。</p><p>希望这可以帮助您理解 <code>alignment-baseline</code> 和 <code>text-anchor</code> 属性并在 SVG 中正确定位和对齐文本元素。</p><h2 id="前端渲染gif" tabindex="-1">前端渲染gif <a class="header-anchor" href="#前端渲染gif" aria-label="Permalink to &quot;前端渲染gif&quot;">​</a></h2><p>在前端中，可以使用 <code>&lt;canvas&gt;</code> 元素和一些 JavaScript 库来渲染 GIF 动态图像。以下是一些常用的库：</p><ul><li><code>gif.js</code>：一个纯 JavaScript 实现的 GIF 编码器和解码器。</li><li><code>jsgif</code>：另一个用于在浏览器中解码和展示 GIF 的 JavaScript 库。</li><li><code>gifffer</code>：一种用于在页面上呈现 GIF 的轻量级 JS 库，它使用了 <code>gif.js</code> 并将其自动注入到<code>&lt;img&gt;</code> 标签中。</li></ul><p>以下是 <code>gif.js</code> 库的一个基本示例：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">html&lt;canvas id=&quot;my-canvas&quot; width=&quot;320&quot; height=&quot;240&quot;&gt;&lt;/canvas&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">jsimport GIF from &#39;gif.js&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">const canvas = document.getElementById(&#39;my-canvas&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">const ctx = canvas.getContext(&#39;2d&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 创建一个新的 GIF 对象</span></span>
<span class="line"><span style="color:#A6ACCD;">const gif = new GIF&#39;&#39;{</span></span>
<span class="line"><span style="color:#A6ACCD;">  workers: 2,</span></span>
<span class="line"><span style="color:#A6ACCD;">  quality: 10,</span></span>
<span class="line"><span style="color:#A6ACCD;">}&#39;&#39;&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 添加每帧图像到 GIF 对象</span></span>
<span class="line"><span style="color:#A6ACCD;">gif.addFrame&#39;&#39;ctx.getImageData&#39;&#39;0, 0, canvas.width, canvas.height)&#39;&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 完成并生成最终的 GIF 数据</span></span>
<span class="line"><span style="color:#A6ACCD;">gif.on &#39;&#39;&#39;&#39;finished&#39;&#39;&#39;&#39;, function(blob) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  const url = URL.createObjectURL&#39;&#39;blob&#39;&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  // 渲染到页面上</span></span>
<span class="line"><span style="color:#A6ACCD;">  const img = new Image();</span></span>
<span class="line"><span style="color:#A6ACCD;">  img.src = url;</span></span>
<span class="line"><span style="color:#A6ACCD;">  document.body.appendChild&#39;&#39;img&#39;&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">gif.render&#39;&#39;&#39;&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>在这个示例中，先获取到一个新的 <code>GIF</code> 对象，并指定相关的配置选项。然后，使用 <code>addFrame</code> 方法将帧图像添加到 GIF 对象中。当所有的图像都已经添加完成后，可以调用 <code>render</code> 方法生成最终的 GIF 数据，并使用 <code>URL.createObjectURL</code> 创建可下载的 URL。</p><p>渲染到页面上的话可以在一些 HTML 元素（如 div、img 等）上通过设置 <code>background-image</code> 或 <code>src</code> 属性来进行预览。</p><p>总体来说，需要一些 JavaScript 的图像处理能力以及对 GIF 文件格式的理解，才能在浏览器中渲染 GIF 动态图像。 幸运的是，前端社区中已经有很多优秀的库和工具来简化这个过程。</p><p>在前端中，主要有以下几种方式来渲染 GIF 动态图像：</p><ol><li>使用 <code>&lt;img&gt;</code> 标签</li></ol><p>最简单的方式就是使用普通的 <code>&lt;img&gt;</code> 标签来展示 GIF 图像。浏览器原生支持 GIF 格式图像，因此只需将 GIF 文件路径设置为 <code>&lt;img&gt;</code> 标签的 <code>src</code> 属性即可。例如：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">html&lt;img src=&quot;animation.gif&quot; alt=&quot;Gif animation&quot;&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>优点：易于实现、易于维护。</p><p>缺点：无法通过 JavaScript 直接对动画进行控制，例如无法暂停、开始或修改播放速度。并且在性能较差的设备和网络环境下，可能会发生卡顿情况。</p><ol><li>使用网页上的单独图像组成一组动画帧</li></ol><p>这种方法是使用多张图片来表示动画序列，每张图片都代表着 GIF 动画序列的一个帧。在 JS 中可以通过定时器或动画库来切换每张图片，从而呈现 GIF 动画效果。例如：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">html&lt;div id=&quot;animation&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;img src=&quot;frame1.png&quot; /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;img src=&quot;frame2.png&quot; /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;img src=&quot;frame3.png&quot; /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  ...</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">jsconst animationContainer = document.getElementById(&#39;animation&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">const frames = animationContainer.children;</span></span>
<span class="line"><span style="color:#A6ACCD;">let currentFrame = 0;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">setInterval(() =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 隐藏当前帧</span></span>
<span class="line"><span style="color:#A6ACCD;">  frames[currentFrame].style.display = &#39;none&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  // 显示下一帧</span></span>
<span class="line"><span style="color:#A6ACCD;">  currentFrame++;</span></span>
<span class="line"><span style="color:#A6ACCD;">  if (currentFrame &gt;= frames.length) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    currentFrame = 0;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">  frames[currentFrame].style.display = &#39;block&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">}, 50);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>优点：能够更细微地控制动画效果，例如可以暂停、倒叙和修改播放速度等。</p><p>缺点：需要手动为每一帧创建和管理图像，且难以对一个长时间而复杂的GIF 动画进行编辑或修改。</p><ol><li>使用专门的 JavaScript 库</li></ol><p>前端常见的一些 JavaScript 动画库，如 jQuery, Tween.js, GSAP 等都可以负责加载并渲染 GIF 图像。这些库通常具有更强大的功能，并提供一系列 API 来直接控制动画的行为，例如播放、暂停、跳转和控制播放速度等。例如使用 gif.js 库:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">html&lt;div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;button id=&quot;generate&quot;&gt;Generate GIF&lt;/button&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;canvas id=&quot;preview&quot; width=&quot;300&quot; height=&quot;225&quot;&gt;&lt;/canvas&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">jsimport GIF from &#39;&#39;gif.js&#39;&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">const canvas = document.getElementById(&#39;preview&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">const context = canvas.getContext(&#39;2d&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">const gifGenerator = new GIF({</span></span>
<span class="line"><span style="color:#A6ACCD;">  workers: 2,</span></span>
<span class="line"><span style="color:#A6ACCD;">  quality: 10,</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">// 循环生成每一帧</span></span>
<span class="line"><span style="color:#A6ACCD;">for (let i = 0; i &lt;= 10; i++) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  context.fillStyle = \`rgb(\${i * 25}, \${i * 10}, \${i * 8})\`;</span></span>
<span class="line"><span style="color:#A6ACCD;">  context.fillRect(0, 0, canvas.width, canvas.height);</span></span>
<span class="line"><span style="color:#A6ACCD;">  gifGenerator.addFrame(context, { delay: 100 });</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 当帧添加完成后生成GIF</span></span>
<span class="line"><span style="color:#A6ACCD;">gifGenerator.on(&#39;finished&#39;, function(blob) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  const image = new Image();</span></span>
<span class="line"><span style="color:#A6ACCD;">  image.src = URL.createObjectURL(blob);</span></span>
<span class="line"><span style="color:#A6ACCD;">  document.body.appendChild(image);</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 点击按钮来生成 GIF</span></span>
<span class="line"><span style="color:#A6ACCD;">document.getElementById(&#39;generate&#39;).addEventListener(&#39;click&#39;, function(e) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  e.preventDefault();</span></span>
<span class="line"><span style="color:#A6ACCD;">  gifGenerator.render();</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>优点：图像质量和播放性能通常较好，且具有更强大的控制动画的 API 和操作选项。</p><p>缺点：需要首先引入外部库并熟悉其相关功能，学习曲线相比前两种方法略高。在对于像素密集型的动画（如动态背景等）可能存在性能问题。</p><p>总体来说，选择合适的方法取决于要呈现的 GIF 类型、应用场景以及个人偏好。针对不同的情况，开发者可以采用多种方式进行 GIF 动画展示和操作。</p><h2 id="fuse-js" tabindex="-1">Fuse.js <a class="header-anchor" href="#fuse-js" aria-label="Permalink to &quot;Fuse.js&quot;">​</a></h2><p><code>Fuse.js</code> 是一种 JavaScript 模糊搜索库，能够在给定集合中快速搜索模式（搜索词）。它支持各种模糊搜索、排序和过滤选项，并提供了各种可定制的操作选项。</p><p>以下是一个基本的 <code>Fuse.js</code> 示例：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">jsimport Fuse from &#39;fuse.js&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">const data = [</span></span>
<span class="line"><span style="color:#A6ACCD;">  { name: &#39;John Doe&#39;, age: 25, city: &#39;New York&#39; },</span></span>
<span class="line"><span style="color:#A6ACCD;">  { name: &#39;Jane Doe&#39;, age: 35, city: &#39;Chicago&#39; },</span></span>
<span class="line"><span style="color:#A6ACCD;">  { name: &#39;Joe Smith&#39;, age: 42, city: &#39;San Francisco&#39; },</span></span>
<span class="line"><span style="color:#A6ACCD;">  { name: &#39;Sarah Johnson&#39;, age: 29, city: &#39;Seattle&#39; },</span></span>
<span class="line"><span style="color:#A6ACCD;">  { name: &#39;Adam Lee&#39;, age: 39, city: &#39;Los Angeles&#39; },</span></span>
<span class="line"><span style="color:#A6ACCD;">];</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 配置 Fuse 对象</span></span>
<span class="line"><span style="color:#A6ACCD;">const options = {</span></span>
<span class="line"><span style="color:#A6ACCD;">  keys: [&#39;name&#39;, &#39;city&#39;], // 搜索字段</span></span>
<span class="line"><span style="color:#A6ACCD;">  threshold: 0.4, // 匹配阈值。0 表示完全匹配，1 表示没有匹配。</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 创建 Fuse 对象并进行搜索</span></span>
<span class="line"><span style="color:#A6ACCD;">const fuse = new Fuse(data, options);</span></span>
<span class="line"><span style="color:#A6ACCD;">const result = fuse.search(&#39;john&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(result); // [{ name: &#39;John Doe&#39;, age: 25, city: &#39;New York&#39; }]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>在这个示例中，使用 <code>Fuse()</code> 构造函数创建了一个 <code>Fuse</code> 对象，并指定要搜索的数据及其配置选项。然后，<code>search()</code> 方法被调用来执行具体的搜索操作，并将搜索结果存储在一个数组中返回。</p><p>需要注意的是，<code>Fuse.js</code> 还支持诸如模糊搜索、加权搜索等更高级的搜索，我们只是展示了基本的示例以方便理解。完整的 API 文档可以在 <code>Fuse.js</code> 的官方网站上找到。</p><p><a href="https://fusejs.io" target="_blank" rel="noreferrer">文档</a></p><h2 id="全屏" tabindex="-1">全屏 <a class="header-anchor" href="#全屏" aria-label="Permalink to &quot;全屏&quot;">​</a></h2><p>import { useFullscreen } from &#39;@vueuse/core&#39;</p><p>const { isFullscreen, enter, exit, toggle } = useFullscreen();</p><p><code>@vueuse/core</code> 库中的 <code>useFullscreen</code> 用于控制元素进入或退出全屏模式。以下是介绍其基本使用方法的示例：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;template&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;div ref=&quot;fullscreenEl&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;button @click=&quot;toggleFullscreen&quot;&gt;Toggle Fullscreen&lt;/button&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;p&gt;Press the Esc key to exit full screen mode.&lt;/p&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/template&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;script&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">import { useFullscreen } from &#39;@vueuse/core&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">export default {</span></span>
<span class="line"><span style="color:#A6ACCD;">  setup() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    const { toggle, isFullscreen, element } = useFullscreen();</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    function toggleFullscreen() {</span></span>
<span class="line"><span style="color:#A6ACCD;">      toggle();</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    return {</span></span>
<span class="line"><span style="color:#A6ACCD;">      toggleFullscreen,</span></span>
<span class="line"><span style="color:#A6ACCD;">      isFullscreen,</span></span>
<span class="line"><span style="color:#A6ACCD;">      fullscreenElement: element,</span></span>
<span class="line"><span style="color:#A6ACCD;">    };</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>在这个示例中，通过 <code>ref</code> 获取到需要开启全屏的元素，然后调用 <code>useFullscreen</code> 方法来获取相关控制函数和状态。然后将 <code>toggleFullscreen</code> 函数绑定到按钮的点击事件，当用户点击按钮时该函数将调用 <code>toggle</code> 函数切换进入或退出全屏模式。最后，将 <code>isFullscreen</code> 和 <code>element</code> 属性作为组件的返回值暴露出来，以便在 Vue 模板中使用。</p><p>提示：如果您需要对特定元素进行全屏操作，需要将 <code>ref</code> 中存储的实际 DOM 元素传递给 <code>useFullscreen</code> 函数。如果未指定任何元素，则默认将文档设为全屏模式。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;template&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;video ref=&quot;videoRef&quot; controls width=&quot;300&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;source src=&quot;./video.mp4&quot; type=&quot;video/mp4&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;/video&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;button @click=&quot;toggleFullscreen&quot;&gt;Toggle Fullscreen Video&lt;/button&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/template&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;script&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">import { useFullscreen } from &#39;@vueuse/core&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">export default {</span></span>
<span class="line"><span style="color:#A6ACCD;">  setup() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    const videoRef = ref(null);</span></span>
<span class="line"><span style="color:#A6ACCD;">    const { toggle, isFullscreen, element } = useFullscreen(videoRef);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    function toggleFullscreen() {</span></span>
<span class="line"><span style="color:#A6ACCD;">      toggle();</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    return {</span></span>
<span class="line"><span style="color:#A6ACCD;">      toggleFullscreen,</span></span>
<span class="line"><span style="color:#A6ACCD;">      isFullscreen,</span></span>
<span class="line"><span style="color:#A6ACCD;">      fullscreenElement: element,</span></span>
<span class="line"><span style="color:#A6ACCD;">    };</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>在这个示例中，<code>useFullscreen</code> 将 <code>videoRef</code> 参数传递给工具方法。这使得当用户点击切换全屏按钮时，只有视频元素会进入全屏模式。</p><h2 id="usewindowsize" tabindex="-1">useWindowSize <a class="header-anchor" href="#usewindowsize" aria-label="Permalink to &quot;useWindowSize&quot;">​</a></h2><p><code>useWindowSize()</code> 是 Vue.js 中 @vueuse/core 库提供的一个内置函数，用于在 Vue 组件中获取当前浏览器窗口的大小。</p><p>该函数返回一个包含浏览器窗口宽度和高度的响应式对象。在页面加载时，可以通过该函数获取初始窗口大小，并在窗口大小变化事件中自动更新组件的状态。</p><p>下面是一个示例，展示了如何使用 <code>useWindowSize()</code> 函数来订阅窗口大小变化并改变组件的样式：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;template&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;div :style=&quot;containerStyle&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;h1&gt;Hello World!&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/template&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;script&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">import { useWindowSize } from &#39;@vueuse/core&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">export default {</span></span>
<span class="line"><span style="color:#A6ACCD;">  setup() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    const { width, height } = useWindowSize();</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    const containerStyle = {</span></span>
<span class="line"><span style="color:#A6ACCD;">      display: &#39;flex&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">      justifyContent: &#39;center&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">      alignItems: &#39;center&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">      minHeight: \`\${height}px\`,</span></span>
<span class="line"><span style="color:#A6ACCD;">    };</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    return {</span></span>
<span class="line"><span style="color:#A6ACCD;">      containerStyle,</span></span>
<span class="line"><span style="color:#A6ACCD;">    };</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>在上面的示例中，我们定义了一个 Vue 组件，其中使用 <code>useWindowSize()</code> 函数来获取浏览器窗口的大小。通过获取到的窗口大小值，我们可以创建一个响应式对象 <code>containerStyle</code>，用于设置父容器的样式。在窗口大小变化时，<code>useWindowSize()</code> 会自动更新 <code>width</code> 和 <code>height</code> 值，从而实现 UI 的响应式布局。</p><p>总之，使用 <code>useWindowSize()</code> 函数可以帮助 Vue 开发者更方便地订阅窗口大小变化事件，并实现响应式样式的布局，从而提高页面的用户体验。</p><h2 id="离开页面保存" tabindex="-1">离开页面保存 <a class="header-anchor" href="#离开页面保存" aria-label="Permalink to &quot;离开页面保存&quot;">​</a></h2><p>在使用 Vue.js 开发时，实现离开页面时询问用户是否保存的功能，可以使用以下两种常见的实现方案：</p><ol><li>利用 <code>window.onbeforeunload</code> 事件</li></ol><p>像传统 Web 应用一样，可以监听 <code>window.onbeforeunload</code> 事件，并在事件回调函数中弹出确认对话框提示用户是否保存。在应用中使用 Vue Router 时，通常在应用初始化时增加一个路由守卫来监听该事件。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">router.beforeEach(function(to, from, next) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  window.addEventListener(&#39;beforeunload&#39;, function(e) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    const unsavedData = checkIfUnsavedDataExist();</span></span>
<span class="line"><span style="color:#A6ACCD;">    if (unsavedData !== null &amp;&amp; unsavedData !== undefined) {</span></span>
<span class="line"><span style="color:#A6ACCD;">      // prompt 方法会在浏览器中弹出确认对话框。</span></span>
<span class="line"><span style="color:#A6ACCD;">      e.returnValue = &#39;&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">      return unsavedData;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">  });</span></span>
<span class="line"><span style="color:#A6ACCD;">  next();</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在上述代码中，<code>checkIfUnsavedDataExist()</code> 方法用于判断当前页面中是否存在未保存的数据，默认返回值为 <code>null</code> 或者 <code>undefined</code>，如果有未保存的数据，就通过 <code>prompt</code> 弹出确认对话框提示用户是否离开页面或者保存数据。</p><ol><li>利用 Vue Router 导航守卫</li></ol><p>Vue Router 提供了一组导航钩子函数，可以在路由跳转前后执行相应的函数以完成进一步操作。其中 <code>beforeRouteLeave</code> 钩子函数可以用于在离开当前路由之前做一些操作，如询问用户是否需要保存修改。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">export default {</span></span>
<span class="line"><span style="color:#A6ACCD;">  beforeRouteLeave(to, from, next) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    const unsavedData = checkIfUnsavedDataExist();</span></span>
<span class="line"><span style="color:#A6ACCD;">    if (unsavedData !== null &amp;&amp; unsavedData !== undefined) {</span></span>
<span class="line"><span style="color:#A6ACCD;">      const confirmed = window.confirm(&#39;是否保存离开前的修改？&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">      if (confirmed) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        saveChanges(unsavedData);</span></span>
<span class="line"><span style="color:#A6ACCD;">      }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    next();</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在上述代码中，<code>beforeRouteLeave</code> 钩子函数返回用户收到一个确认对话框，询问用户是否需要保存数据修改。如果用户点击“确定”，则会调用 <code>saveChanges()</code> 方法来保存数据，否则不做任何操作直接关闭页面。</p><p>需要注意的是，这种方法只能在使用 Vue Router 进行路由管理时使用，相较于第一种方法稍微方便些，但功能也受到路由约束，适合于中小型单页应用的场景。</p><h2 id="css3-实现瀑布流布局" tabindex="-1">CSS3 实现瀑布流布局 <a class="header-anchor" href="#css3-实现瀑布流布局" aria-label="Permalink to &quot;CSS3 实现瀑布流布局&quot;">​</a></h2><p>CSS3 还提供了一种布局技术叫做多列布局，可以轻松实现基本的瀑布流效果。在该方法中，您只需要通过 CSS 样式指定一个多列布局，然后使用 <code>column-count</code>、<code>column-gap</code> 和 <code>column-width</code> 属性来控制列数、行间距和列宽等参数。例如：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">html</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;div id=&quot;masonry&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;div class=&quot;item&quot;&gt;Item 1&lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;div class=&quot;item&quot;&gt;Item 2&lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;div class=&quot;item&quot;&gt;Item 3&lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;div class=&quot;item&quot;&gt;Item 4&lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;div class=&quot;item&quot;&gt;Item 5&lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;div class=&quot;item&quot;&gt;Item 6&lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;!-- 其他 HTML 元素 --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">#masonry {</span></span>
<span class="line"><span style="color:#A6ACCD;">  column-count: 3; /* 列数 */</span></span>
<span class="line"><span style="color:#A6ACCD;">  column-gap: 5px; /* 行间距 */</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">.item {</span></span>
<span class="line"><span style="color:#A6ACCD;">  display: inline-block;</span></span>
<span class="line"><span style="color:#A6ACCD;">  width: 100%;</span></span>
<span class="line"><span style="color:#A6ACCD;">  margin-bottom: 5px; /* 瓷砖之间的间距 */</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>在上述示例中，整个容器被分成三列，并且每个项目都是调整过大小的格子，可以放置在任意一列中。设置每个元素的宽度为100%保证其能够填充整个列，同时也要为元素设置一些外边距（如上例中的 <code>margin-bottom</code>），以控制元素之间的空间距离。</p><p>需要注意的是，这种方法对于元素数量不同或源瀑布流布局高度不一致的情况可能会出现问题，但对于固定大小和数量的元素，它是一个非常简单、快速而且响应式的瀑布流实现方案。</p><h1 id="geoservice-各种查询规则" tabindex="-1">geoservice 各种查询规则 <a class="header-anchor" href="#geoservice-各种查询规则" aria-label="Permalink to &quot;geoservice  各种查询规则&quot;">​</a></h1><p>以下是GeoServices中常见的查询规则及其英文参数：</p><ul><li>等于 (equals): <code>where=field_name=value</code></li><li>小于等于 (less than or equal to): <code>where=field_name&lt;=value</code></li><li>大于等于 (greater than or equal to): <code>where=field_name&gt;=value</code></li><li>小于 (less than): <code>where=field_name&lt;value</code></li><li>大于 (greater than): <code>where=field_name&gt;value</code></li><li>不等于 (not equal to): <code>where=field_name&lt;&gt;value</code></li><li>包含 (contains): <code>where=field_name LIKE &#39;%value%&#39;</code></li><li>左匹配 (starts with): <code>where=field_name LIKE &#39;value%&#39;</code></li><li>右匹配 (ends with): <code>where=field_name LIKE &#39;%value&#39;</code></li></ul><p>其中，<code>where</code>参数用于指定查询条件。例如：</p><ul><li>查询名称为&quot;北京市&quot;的行政区划：<code>where=NAME=&#39;北京市&#39;</code></li><li>查询人口数大于100万的城市：<code>where=POPULATION&gt;1000000</code></li></ul><p>除此之外，还有一些其他的查询参数和操作符：</p><ul><li><code>order by</code>: 根据指定字段排序，可以指定升序或降序 (<code>ASC</code>或<code>DESC</code>)。例如：<code>orderByFields=FIELD_NAME ASC</code></li><li><code>return geometry</code>: 是否返回要素的空间信息 (<code>true</code>或<code>false</code>)。</li><li><code>out fields</code>: 指定返回的字段。例如：<code>outFields=FIELD1,FIELD2</code></li><li><code>geometry type</code>: 指定返回的几何类型 (<code>esriGeometryPoint</code>, <code>esriGeometryPolyline</code>, <code>esriGeometryPolygon</code>等)。</li><li><code>spatial relation</code>: 指定空间查询的操作符，如<code>esriSpatialRelContains</code>,<code>esriSpatialRelIntersects</code>等。</li></ul><p>了解这些查询规则能够帮助你更加灵活地使用GeoServices进行GIS数据的查询和分析</p><p>[ { &quot;statisticType&quot;: &quot;&lt;count | sum | min | max | avg | stddev | var&gt;&quot;, &quot;onStatisticField&quot;: &quot;Field1&quot;, &quot;outStatisticFieldName&quot;: &quot;Out_Field_Name1&quot; }, { &quot;statisticType&quot;: &quot;&lt;count | sum | min | max | avg | stddev | var&gt;&quot;, &quot;onStatisticField&quot;: &quot;Field2&quot;, &quot;outStatisticFieldName&quot;: &quot;Out_Field_Name2&quot; } ]</p><h1 id="iframe" tabindex="-1">iframe <a class="header-anchor" href="#iframe" aria-label="Permalink to &quot;iframe&quot;">​</a></h1><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h2><p><strong>allowfullscreen</strong></p><p>设置 为 true ，通过 调用 iframe 的 requesFullscreen（） 激活全屏模式</p><h3 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h3><p><strong>contentWindow</strong> 获取 iframe 的window 对象</p><p><strong>contentDocment</strong> 获取 iframe 的 dom 对象</p><p><strong>window.frames[&#39;name&#39;]</strong> 通过iframe 标签 name 属性 来获取 iframe window 对象</p><p><em>注</em>： 以下的window 是指的 iframe 的window</p><p><strong>window.parent</strong> 获取上一级的 window对象 如果上级依旧是 iframe 即获取的是 iframe的window</p><p>window .top 获取 最顶层的 window 对象</p><h2 id="window-postmessage-and-message" tabindex="-1">window.postMessage And message <a class="header-anchor" href="#window-postmessage-and-message" aria-label="Permalink to &quot;window.postMessage And message&quot;">​</a></h2><p><code>window.postMessage()</code>是一种跨域窗口消息传递机制。它通过在不同的HTML文档（包括打开了不同域名或端口的窗口）之间提供了一种安全机制，以便在这些窗口之间相互通信。调用 <code>window.postMessage()</code> 函数时，将会发送一个消息到指定的窗口，另外的窗口可以通过捕获该窗口的 &quot;message&quot; 事件来获取发送方的消息。</p><p>通过一个具体示例来解释如何使用 <code>window.postMessage()</code>：</p><p>假设有两个页面，其中一个是父级页面，一个是子级页面，两者有不同的域名。如果希望从子页面向父页面发送消息，可以在子页面中使用以下代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">parent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello from iframe!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://parent-page.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这会将一条消息发送到父级页面，父级页面必须已经实现了接收来自子页面的跨域消息。然后，在父级页面的JavaScript文件中，可以添加一个事件监听器来接收消息：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">origin</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://child-page.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>使用 <code>event.origin</code> 属性可以确保在处理来自子页面的消息时不会遭受跨站点脚本攻击。</p><p><code>iframe</code> 是HTML中的元素标签之一，可让您在页面中嵌入另一个页面。它有一些有用的属性，包括：</p><ul><li><code>src</code>：指定要嵌入的页面的URL。</li><li><code>width</code> 和 <code>height</code>：设置iframe元素的宽度和高度。</li><li><code>allowfullscreen</code>：允许用户使用全屏模式查看iframe内的内容。</li><li><code>sandbox</code>：可以通过指定特定的标志来限制与 iframe 内容的交互。</li></ul><p>在前面的示例中，将消息发送到父级窗口的代码来自于子级页面的 JavaScript 文件，其中 iframe 用作子级页面的容器。</p><p>总之，<code>window.postMessage()</code> 是安全传递跨域消息的方式之一。而 <code>iframe</code> 则可以在同一页面中承载其他页面或在不同的域名下进行跨域通信。</p><h2 id="ruoyi" tabindex="-1">ruoyi <a class="header-anchor" href="#ruoyi" aria-label="Permalink to &quot;ruoyi&quot;">​</a></h2><p>不李姐</p><p><a href="http://doc.ruoyi.vip/ruoyi-vue/document/qdsc.html#%E8%AF%B7%E6%B1%82%E7%A4%BA%E4%BE%8B" target="_blank" rel="noreferrer">http://doc.ruoyi.vip/ruoyi-vue/document/qdsc.html#请求示例</a></p><h2 id="" tabindex="-1"><img src="`+l+`" alt="image-20230508133253015"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;![image-20230508133253015](/images/image-20230508133253015.png)&quot;">​</a></h2><h2 id="document-activeelement" tabindex="-1">document.activeElement <a class="header-anchor" href="#document-activeelement" aria-label="Permalink to &quot;document.activeElement&quot;">​</a></h2><p><code>document.activeElement</code> 是一个只读属性，它返回当前被激活的DOM元素，也就是具有焦点并且正在与之交互的元素。</p><p>在网页中，当用户与页面上的表单元素或可编辑文本区域等交互时，通常会将焦点设置在这些元素中的一个。使用 <code>document.activeElement</code> 可以轻松确定哪个元素当前处于焦点状态。</p><p>下面是一个实际的例子来演示如何使用 <code>document.activeElement</code>：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">input1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">input2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> input1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">input1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> input2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">input2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 当 input1 获得焦点时，记录 active element</span></span>
<span class="line"><span style="color:#A6ACCD;">  input1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">focus</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Active Element: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">activeElement</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 当 input2 获得焦点时，记录 active element</span></span>
<span class="line"><span style="color:#A6ACCD;">  input2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">focus</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Active Element: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">activeElement</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>在上面的示例中，我们创建了两个输入框，并为每个输入框添加了一个焦点事件监听器。当登录到其中一个输入框时，我们使用 <code>document.activeElement</code> 记录当前的焦点元素，并在控制台打印其ID。</p><p>此外，您还可以通过检查 <code>document.hasFocus()</code> 的返回值来确定文档是否具有活动焦点。如果返回 <code>true</code>，则表示文档当前是活动的。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Document has focus: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasFocus</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果您希望跟踪焦点元素并执行其他任务，请使用事件监听器，例如 <code>focusin</code> 或 <code>focusout</code>。这些事件在文档中的任何元素进入或退出焦点时被触发。</p><p>总之，<code>document.activeElement</code> 是检索当前处于焦点状态的DOM元素的简单方法。您可以通过处理焦点事件和其他相关事件来跟踪，并对其进行操作。</p><h2 id="document-hasfocus-状态" tabindex="-1">document.hasFocus() 状态 <a class="header-anchor" href="#document-hasfocus-状态" aria-label="Permalink to &quot;document.hasFocus()  状态&quot;">​</a></h2><p>在 <code>document.hasFocus()</code> 返回 <code>false</code>的情况下，可以将其作为文档当前未处于焦点状态的信号。以下是常见情况：</p><ul><li>当前文档不在浏览器窗口或选项卡中打开。</li><li>文档所在的窗口或选项卡失去了焦点，并且另一个应用程序或浏览器选项卡现在正受到用户的注意，因此文档丧失了活动焦点。</li></ul><p>例如，如果用户使用操作系统自带的 Alt+Tab (<a href="https://support.microsoft.com/en-us/windows/keyboard-shortcuts-in-windows-dcc61a57-8ff0-cffe-9796-cb9706c75eec" target="_blank" rel="noreferrer">Windows</a>/<a href="https://support.apple.com/en-us/HT204216" target="_blank" rel="noreferrer">macOS</a>) 切换到其他正在运行的应用程序，则文档会失去活动焦点并导致 <code>document.hasFocus()</code> 返回 <code>false</code>。</p><p>在移动设备上，在用户对设备进行调整、交互或后台活动之时，文档可能会失去活动焦点，因此 <code>document.hasFocus()</code> 可能返回 <code>false</code>。</p><p>总之，在这些情况下，<code>document.hasFocus()</code> 将返回 <code>false</code> 以指示文档当前不处于活动状态。</p><h2 id="document-getselection" tabindex="-1">document.getSelection() <a class="header-anchor" href="#document-getselection" aria-label="Permalink to &quot;document.getSelection()&quot;">​</a></h2><p><code>document.getSelection()</code>方法返回用户在当前文档中选择的文本。</p><p><strong>语法：</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const selectionObject = window.getSelection();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中，<code>selectionObject</code>是一个 <code>Selection</code> 对象，它包含所选文本及其相关属性和方法。</p><p><strong>常见用法：</strong></p><ol><li>获取所选文本：</li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const selectionText = window.getSelection().toString();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li>设置所选文本样式：</li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const selectionObject = window.getSelection();</span></span>
<span class="line"><span style="color:#A6ACCD;">if (selectionObject.rangeCount) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  const selectedRange = selectionObject.getRangeAt(0);</span></span>
<span class="line"><span style="color:#A6ACCD;">  const newNode = document.createElement(&#39;span&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">  newNode.setAttribute(&#39;style&#39;, &#39;background-color: yellow;&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">  selectedRange.surroundContents(newNode);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol><li>清除所选文本样式：</li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const selectionObject = window.getSelection();</span></span>
<span class="line"><span style="color:#A6ACCD;">if (selectionObject.rangeCount) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  const selectedRange = selectionObject.getRangeAt(0);</span></span>
<span class="line"><span style="color:#A6ACCD;">  const parentNode = selectedRange.commonAncestorContainer;</span></span>
<span class="line"><span style="color:#A6ACCD;">  const newNode = document.createElement(&#39;span&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">  newNode.innerHTML = selectedRange.toString();</span></span>
<span class="line"><span style="color:#A6ACCD;">  parentNode.insertBefore(newNode, selectedRange.startContainer);</span></span>
<span class="line"><span style="color:#A6ACCD;">  selectedRange.deleteContents();</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol><li>监听文本选择变化事件：</li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">document.addEventListener(&#39;selectionchange&#39;, () =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(window.getSelection().toString());</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细的 <code>Selection</code> 对象属性和方法可以参考 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection" target="_blank" rel="noreferrer">MDN Web 文档</a>。</p><h2 id="keep-alive" tabindex="-1">keep-alive <a class="header-anchor" href="#keep-alive" aria-label="Permalink to &quot;keep-alive&quot;">​</a></h2><p>在 Vue 中，<code>&lt;keep-alive&gt;</code> 是一个抽象组件，它可以在组件切换时将不活动的组件缓存起来，以提高应用程序的性能。当激活该组件时，如果存在缓存，则直接从缓存中渲染，而不会重新创建组件实例。</p><p>下面是如何使用 <code>&lt;keep-alive&gt;</code> 组件：</p><ol><li>将要缓存的组件包装在 <code>&lt;keep-alive&gt;</code>标记内</li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">html&lt;template&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;keep-alive&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;component :is=&quot;currentComponent&quot;&gt;&lt;/component&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;/keep-alive&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;button @click=&quot;toggleComponent&quot;&gt;Toggle Component&lt;/button&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/template&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在上述示例中，我们将需要进行缓存的组件包装在 <code>&lt;keep-alive&gt;</code> 标记内，并将其 <code>is</code> 名称动态地绑定到 <code>currentComponent</code> 变量。</p><ol><li>设置 include 和 exclude 属性进行组件缓存</li></ol><p>您可以通过 <code>include</code> 和 <code>exclude</code> prop 定义将哪些组件缓存或不缓存。其中，<code>include</code> 和 <code>exclude</code> 分别是字符串或正则表达式数组，可以匹配要包含或排除的组件名称。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">html&lt;template&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;keep-alive :include=&quot;cachedViews&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;router-view&gt;&lt;/router-view&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;/keep-alive&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/template&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;script&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">export default {</span></span>
<span class="line"><span style="color:#A6ACCD;">  data() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    return {</span></span>
<span class="line"><span style="color:#A6ACCD;">      cachedViews: [&quot;Home&quot;, &quot;About&quot;],</span></span>
<span class="line"><span style="color:#A6ACCD;">    };</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>在上述示例中，我们设置了 <code>include</code> 属性，并将缓存的组件名称存储在 <code>cachedViews</code> 数组中。</p><ol><li>使用 activated 和 deactivated 钩子函数</li></ol><p>您可以使用 <code>activated</code> 和 <code>deactivated</code> 生命周期钩子函数，在组件激活和失去焦点时执行特定逻辑。例如，您可以在 <code>activated</code> 生命周期钩子函数中加载数据或执行其他相关操作，从而提高组件渲染的速度。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">html&lt;template&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;keep-alive&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;router-view&gt;&lt;/router-view&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;/keep-alive&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/template&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;script&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">export default {</span></span>
<span class="line"><span style="color:#A6ACCD;">  activated() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    // Component is activated</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(&#39;Component is activated&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">  deactivated() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    // Component is deactivated</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(&#39;Component is deactivated&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="你不知道的复制粘贴" tabindex="-1">你不知道的复制粘贴 <a class="header-anchor" href="#你不知道的复制粘贴" aria-label="Permalink to &quot;你不知道的复制粘贴&quot;">​</a></h2><p>前端实现复制功能的方法有以下几种：</p><ol><li>使用 Clipboard API</li></ol><p>Clipboard API 是一个浏览器原生提供的 API，可以实现将文本或文件粘贴到剪切板中。我们可以使用 <code>navigator.clipboard</code> 对象来调用相关方法。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">async function copyText(text) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  try {</span></span>
<span class="line"><span style="color:#A6ACCD;">    await navigator.clipboard.writeText(text);</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(&#39;Text copied to clipboard&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">  } catch (err) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.error(&#39;Failed to copy text: &#39;, err);</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>但需要注意的是，该 API 并不支持所有的浏览器，部分浏览器上并没有实现该 API，所以要做好兼容性处理。</p><ol><li>借助 textarea 元素实现</li></ol><p>在页面中创建一个隐藏的 textarea 元素，设置其 value 属性为要复制的内容，然后手动选取该元素中的内容，并调用 <code>document.execCommand(&#39;copy&#39;)</code> 复制到剪切板中。最后再移除该元素。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">function copyText(text) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  const textarea = document.createElement(&#39;textarea&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">  textarea.value = text;</span></span>
<span class="line"><span style="color:#A6ACCD;">  textarea.style.position = &#39;fixed&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">  textarea.style.bottom = &#39;0&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">  document.body.appendChild(textarea);</span></span>
<span class="line"><span style="color:#A6ACCD;">  textarea.select();</span></span>
<span class="line"><span style="color:#A6ACCD;">  document.execCommand(&#39;copy&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">  document.body.removeChild(textarea);</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(&#39;Text copied to clipboard&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这种方法和 Clipboard API 一样需要注意兼容性问题。</p><ol><li>使用 Flash 插件实现</li></ol><p>Flash 插件在早期被广泛应用于网站中复制文本到剪贴板的功能，由于 Flash 插件的普及率非常高，这种方法是跨浏览器实现复制功能的较为稳定的一种方案。</p><p>在页面中嵌入一个 Flash 文件，然后使用 ActionScript 内置的 API 实现文本复制操作。</p><p>不过随着 Flash 的逐步退出历史舞台，这种方法的应用也越来越少了。</p><p>综上所述，目前较为推荐的方案是使用 Clipboard API，并在其不支持的情况下切换到使用 textarea 方案。</p><h2 id="拷贝" tabindex="-1">拷贝 <a class="header-anchor" href="#拷贝" aria-label="Permalink to &quot;拷贝&quot;">​</a></h2><p>在 JavaScript 中，拷贝一个对象通常有两种方式：浅拷贝和深拷贝。</p><ul><li>浅拷贝：只拷贝了原对象的引用，新对象和原对象共享同一块内存空间，这意味着当新对象被修改时，原对象也会跟着改变。</li><li>深拷贝：创建一个新对象，然后递归地将原对象的每个属性都复制到新对象中，这样就能保证新对象和原对象互不影响。</li></ul><p>以下是深浅拷贝的实现方式：</p><h3 id="浅拷贝" tabindex="-1">浅拷贝 <a class="header-anchor" href="#浅拷贝" aria-label="Permalink to &quot;浅拷贝&quot;">​</a></h3><p>常见的浅拷贝方法有：</p><h4 id="_1-object-assign" tabindex="-1">1. Object.assign() <a class="header-anchor" href="#_1-object-assign" aria-label="Permalink to &quot;1. Object.assign()&quot;">​</a></h4><p>使用 <code>Object.assign()</code> 将源对象的属性浅拷贝到目标对象中。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">c</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> newObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">assign</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> obj)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">newObj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>需要注意的是，如果源对象的属性值为对象或函数等引用类型，则只是将其引用浅拷贝到目标对象中。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const obj = { a: 1, b: { c: 2 } };</span></span>
<span class="line"><span style="color:#A6ACCD;">const newObj = Object.assign({}, obj);</span></span>
<span class="line"><span style="color:#A6ACCD;">newObj.b.c = 3;</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(obj.b.c); // 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_2-扩展运算符" tabindex="-1">2. 扩展运算符 <a class="header-anchor" href="#_2-扩展运算符" aria-label="Permalink to &quot;2. 扩展运算符&quot;">​</a></h4><p>使用扩展运算符（<code>...</code>）也可以进行浅拷贝。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const obj = { a: 1, b: { c: 2 } };</span></span>
<span class="line"><span style="color:#A6ACCD;">const newObj = { ...obj };</span></span>
<span class="line"><span style="color:#A6ACCD;">newObj.a = 3;</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(obj.a); // 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>同样地，需要注意如果源对象的属性值是对象或函数等引用类型，则只是将其引用浅拷贝到目标对象中。</p><h3 id="深拷贝" tabindex="-1">深拷贝 <a class="header-anchor" href="#深拷贝" aria-label="Permalink to &quot;深拷贝&quot;">​</a></h3><p>以下是几种常见的深拷贝方式：</p><h4 id="_1-json-parse-json-stringify" tabindex="-1">1. JSON.parse() + JSON.stringify() <a class="header-anchor" href="#_1-json-parse-json-stringify" aria-label="Permalink to &quot;1. JSON.parse() + JSON.stringify()&quot;">​</a></h4><p>将对象先转成字符串再转回来，实现深拷贝：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const obj = { a: 1, b: { c: 2 } };</span></span>
<span class="line"><span style="color:#A6ACCD;">const newObj = JSON.parse(JSON.stringify(obj));</span></span>
<span class="line"><span style="color:#A6ACCD;">newObj.b.c = 3;</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(obj.b.c); // 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>但需要注意的是，该方法是有局限性的。会忽略对象中的 undefined 和 function 类型的属性，而且如果对象中存在循环引用的情况，则无法正常进行深拷贝。</p><h4 id="_2-递归复制" tabindex="-1">2. 递归复制 <a class="header-anchor" href="#_2-递归复制" aria-label="Permalink to &quot;2. 递归复制&quot;">​</a></h4><p>递归复制是实现深拷贝的另一种方式，逐层遍历对象并复制每个非引用类型的值。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">function deepClone(obj) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  if (typeof obj !== &#39;object&#39; || obj === null) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    return obj;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  let result = Array.isArray(obj) ? [] : {};</span></span>
<span class="line"><span style="color:#A6ACCD;">  for (let key in obj) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    if (Object.prototype.hasOwnProperty.call(obj, key)) {</span></span>
<span class="line"><span style="color:#A6ACCD;">      result[key] = deepClone(obj[key]);</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">  return result;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>需要注意的是，如果对象中存在循环引用的情况</p><p><a href="https://www.bilibili.com/read/cv21989263" target="_blank" rel="noreferrer">https://www.bilibili.com/read/cv21989263</a></p>`,209),c=[o];function r(t,i,u,d,b,C){return n(),a("div",null,c)}const y=s(p,[["render",r]]);export{m as __pageData,y as default};
