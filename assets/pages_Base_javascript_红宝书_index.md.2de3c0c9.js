import{_ as s,o as a,c as n,X as l}from"./chunks/framework.ecd7c0a9.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/Base/javascript/红宝书/index.md","filePath":"pages/Base/javascript/红宝书/index.md","lastUpdated":1694102434000}'),e={name:"pages/Base/javascript/红宝书/index.md"},o=l(`<h2 id="_21章-错误处理与调试" tabindex="-1">21章 错误处理与调试 <a class="header-anchor" href="#_21章-错误处理与调试" aria-label="Permalink to &quot;21章 错误处理与调试&quot;">​</a></h2><ul><li>trycatch 异常捕获</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//正常状态执行</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">wewewe</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;">(error)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//所有浏览器都有 message属性</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">message</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">//wewewe is not defined</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//最终都会被执行</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">最后都被执行了 不论是否被catch</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li><p>场景用法</p><ul><li>在某个第三方库中存在 不致命的 错误（无法修改） ，可以使用trycatch方法来进行 包裹</li><li>若明确知道代码错误 这样就不再适合 用trycatch了</li></ul></li><li><p>错误类型 8种</p><ul><li>Error</li><li>syntaxError</li><li>URIError //只会在 encodeURI() 或者 decodeURI 传入格式错误时候发生 很少见</li><li>TypeError //类型错误</li><li>ReferenceError //引用错误</li></ul></li></ul><blockquote><p>Error是基类型</p></blockquote><ul><li><p>抛出错误throw</p></li><li><p>统一的错误处理函数 减轻代码冗余</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">condition</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">condition</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">message</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_23-json" tabindex="-1">23 JSON <a class="header-anchor" href="#_23-json" aria-label="Permalink to &quot;23 JSON&quot;">​</a></h3></li><li><p>JSON.stringfy(objct,[titleName,titleName2]) 代替函数</p></li><li><p>JSON.parse(json)还原函数</p></li><li><p>其它参数的目的 为了修改或过滤数据</p></li></ul><h3 id="_24-网络请求" tabindex="-1">24 网络请求 <a class="header-anchor" href="#_24-网络请求" aria-label="Permalink to &quot;24 网络请求&quot;">​</a></h3><blockquote><p>实际开发中尽可能用fetch</p></blockquote><h4 id="xhr" tabindex="-1">XHR <a class="header-anchor" href="#xhr" aria-label="Permalink to &quot;XHR&quot;">​</a></h4><ul><li><p>xhr XMLHttpRequest</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> xhr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">XMLHttpRequest</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">get</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">资源地址</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//第三个参数 是否开启同步</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//发送请求数据 ，无需请求体则 传递null</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">readyState </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0：未初始化（Uninitialized）。尚未调用 open()方法。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1：已打开（Open）。已调用 open()方法，尚未调用 send()方法。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2：已发送（Sent）。已调用 send()方法，尚未收到响应。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 3：接收中（Receiving）。已经收到部分响应。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 4：完成（Complete）。已经收到所有响应，可以使用了。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li><p>abort() //取消异步请求 同时清除引用</p></li><li><p>setRequestHeader()//设置请求头 跨域返回空</p></li><li><p>getAllResponseHeaders()//获取所有请求头 跨域返回空</p></li><li><p>getResponseheaders(&#39;XX&#39;)//获取XX请求头</p></li><li><p>FormData类型 append方法添加数据</p></li><li><p>超时timeout</p></li><li><p>进度事件 Progress Events</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><p>event事件 target其属性是 XHR 包含额外属性lengthCoputable：布尔值 进度信息是否可用 position：接收到的字节数 toalSize：响应头部字节总数 用户提供的数据字节数</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#### 预检请求  </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">- 先向服务器发送一个‘预检’请求，这个请求使用的OPTIONS方法并带有：Origin，请求方法，请求头</span></span>
<span class="line"><span style="color:#A6ACCD;">- 预检请求会有缓存 过期后才会再次发送 预检请求</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">#### 凭据请求</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">- 默认情况 跨域请求 不提供凭证（cookies，HTTP认证，客户端 SSL证书）；可以声明withCredentials 为true表明 请求会发送数据</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">#### 替代跨域技术 利用dom特性</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">- 图片探测</span></span>
<span class="line"><span style="color:#A6ACCD;">- 利用img标签最早实现跨域的一种技术</span></span>
<span class="line"><span style="color:#A6ACCD;">- 缺点：只能单向在服务器获取响应内容 单向通信；</span></span>
<span class="line"><span style="color:#A6ACCD;">- JSONP</span></span>
<span class="line"><span style="color:#A6ACCD;">- 包括回调 与 数据；借用script标签 实现；</span></span>
<span class="line"><span style="color:#A6ACCD;">- 缺点 安全性较差 ，无法界定请求失败 h5设定标准 onerror 但没有任何浏览器实现？（2022年）</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">#### Fetch</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">- 可以加载json</span></span>
<span class="line"><span style="color:#A6ACCD;">- 加载 blob</span></span>
<span class="line"><span style="color:#A6ACCD;">- 加载 text</span></span>
<span class="line"><span style="color:#A6ACCD;">- 中断请求 </span></span>
<span class="line"><span style="color:#A6ACCD;">\`\`\`javascript</span></span>
<span class="line"><span style="color:#A6ACCD;">let abortController = new AbortController()</span></span>
<span class="line"><span style="color:#A6ACCD;">fetch(&#39;xx/xxx/&#39;,{method:&#39;POST&#39;,signal:abortController,    {page:1}).then(res=&gt;res.json()).then(res=&gt;console.log(res))</span></span>
<span class="line"><span style="color:#A6ACCD;">setTimeout(()=&gt;abortController.abort(),5000)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h4 id="header-对象" tabindex="-1">Header 对象 <a class="header-anchor" href="#header-对象" aria-label="Permalink to &quot;Header 对象&quot;">​</a></h4><ul><li>方法 has get delete set keys values entires append(与set类似)</li></ul><h3 id="_14dom" tabindex="-1">14DOM <a class="header-anchor" href="#_14dom" aria-label="Permalink to &quot;14DOM&quot;">​</a></h3><ul><li>节点</li></ul><h3 id="_25-客户端存储" tabindex="-1">25 客户端存储 <a class="header-anchor" href="#_25-客户端存储" aria-label="Permalink to &quot;25 客户端存储&quot;">​</a></h3><h4 id="cookies" tabindex="-1">cookies <a class="header-anchor" href="#cookies" aria-label="Permalink to &quot;cookies&quot;">​</a></h4><h5 id="限制" tabindex="-1">限制 <a class="header-anchor" href="#限制" aria-label="Permalink to &quot;限制&quot;">​</a></h5><ul><li>cookies 与特定的域绑定 这个限制保证了 只能被认可的接受者接受 <strong>不可以被其他域访问</strong></li><li>不要超过300个cookie</li><li>每个域的cookie总数不超过20个</li><li>每个cookie不能超过4096字节</li><li>每个域不能超过81920字节 🚶 不同浏览器存在差异 例如:</li><li>最新的IE 与 Edge 限制每个域不超过 50个cookie</li><li>最新的fireFox 限制每个域不超过 150个cookie</li><li>最新的Opera 限制每个域不超过 180个cookie</li><li>Safari 和 Chrome 对每个域的cookie数没有限制 🖕 如果cookie 总数超过单个域 上限 浏览器会删除之前设置的cookie。浏览器之间会存在差异，避免不确定性，<strong>不要超出限制。</strong></li></ul><h5 id="cookies的构成" tabindex="-1">cookies的构成 <a class="header-anchor" href="#cookies的构成" aria-label="Permalink to &quot;cookies的构成&quot;">​</a></h5><ul><li><strong>名称：</strong> 唯一标识cookie 的名称，不区分大小写；</li><li><strong>值：</strong> 存储 字符串值，值必须经过URL 编码。</li><li><strong>过期时间：</strong> 何时删除cookie值 ；时间到了立即删除 未设置时间 <strong>会话结束删除 cookie</strong></li><li><strong>安全标志：</strong> 设置之后 只使用SSL安全连接的情况下 才会把cookie 发送到服务器。例如请求 https:// xxx 会携带 cookie http:xx则不会携带</li><li>cookie 设置了secure 只能在SSL连接上发送</li></ul><h5 id="javascript中的-cookie" tabindex="-1">JavaScript中的 cookie <a class="header-anchor" href="#javascript中的-cookie" aria-label="Permalink to &quot;JavaScript中的 cookie&quot;">​</a></h5><ul><li>通过 <strong>document.cookie</strong> 设置； 例如：document.cookie =&quot;name=value&quot;</li><li>所有的<strong>值与名必须是URI编码</strong>； 必须使用decodeURIComponent() 解码;</li><li>简化繁杂操作 可以使用<strong>cookie.js</strong></li></ul><h5 id="子cookie" tabindex="-1">子cookie <a class="header-anchor" href="#子cookie" aria-label="Permalink to &quot;子cookie&quot;">​</a></h5><ul><li><p>一个键的值 对应多组键值关系的结构；例如：<strong>name=name1=value1&amp;name2=value2&amp;name3=value3;</strong></p></li><li><p>实际开发中注意<strong>不要超出单个cookie大小</strong></p></li></ul><h5 id="使用cookie-的注意事项" tabindex="-1">使用cookie 的注意事项 <a class="header-anchor" href="#使用cookie-的注意事项" aria-label="Permalink to &quot;使用cookie 的注意事项&quot;">​</a></h5><ul><li><p>HTTP-only 的cookie ；可以在<strong>服务器或浏览器</strong>进行设置；<strong>只能在服务器读取</strong></p></li><li><p>cookie <strong>存储大量的信息 可能会影响 浏览器的性能</strong>；保存cookie越大 请求耗费时间越长；</p></li><li><p>cookie<strong>不要存放敏感数据</strong> 不安全 任何人都可以获取</p></li></ul><h4 id="web-storage" tabindex="-1">web Storage <a class="header-anchor" href="#web-storage" aria-label="Permalink to &quot;web Storage&quot;">​</a></h4><blockquote><p>规范中的两个目标</p><ul><li>提供在cookie 之外的存储会话数据途径</li><li>提供跨会话持久化存储大量数据机制</li><li>定义了两个对象：localStorage 和 sessionStorage</li><li>localStorage 是永久的存储机制；sessionStorage 是跨会话的存储机制</li></ul></blockquote><h6 id="storage类型" tabindex="-1">storage类型 <a class="header-anchor" href="#storage类型" aria-label="Permalink to &quot;storage类型&quot;">​</a></h6><p>增加了如下方法</p><ul><li><strong>clear</strong>():删除所有值；</li><li><strong>getItem</strong>(name):获取name的值；</li><li><strong>key</strong>(index):取得给定位置的名称；</li><li><strong>removeItem</strong>(name):删除给定name的名值对；</li><li><strong>setItem</strong>(name,value);设置给定name的value</li></ul><h5 id="sessionstorage-对象" tabindex="-1">sessionStorage 对象 <a class="header-anchor" href="#sessionstorage-对象" aria-label="Permalink to &quot;sessionStorage 对象&quot;">​</a></h5><ul><li><p>只存储会话数据，<strong>只能保存数据到浏览器（当前页面）关闭</strong>；</p></li><li><p>存储的sessionStorage <strong>不受页面刷新</strong>的影响；</p></li><li><p>sessionStorage 对象 与服务器会话紧密相关 <strong>运行本地文件不能使用</strong>；</p></li><li><p>存储在sessionStorage对象的数据 <strong>只能在最初的页面使用</strong> 再多页面程序用处有限；</p></li><li><p>添加数据 两种方式：</p><ul><li>sessionStorage.setItem(&quot;name&quot;,&quot;value&quot;) //使用setItem实现</li><li>sessionStorage.name = value // 使用属性存储数据</li></ul></li><li><p>所有现代浏览器实现存储写入 都是使用<strong>同步阻塞</strong>方式，因此数据会立即提交到存储；</p></li><li><p>获取属性 两种方式：</p><ul><li>sessionStorage.getItem(&#39;name&#39;)//通过 getItem实现</li><li>sessionStorage.name //使用对象属性方式 获取</li></ul></li><li><p>遍历所有值可以通过 for循环与 key()方法实现</p></li><li><p>删除属性</p><ul><li>sessionStorage.removeItem(name) 实现</li><li>delete sessionStorage.name //对象方法实现</li></ul></li></ul><h5 id="localstorage-对象" tabindex="-1">localStorage 对象 <a class="header-anchor" href="#localstorage-对象" aria-label="Permalink to &quot;localStorage 对象&quot;">​</a></h5>`,36),p=[o];function r(t,i,c,u,b,y){return a(),n("div",null,p)}const h=s(e,[["render",r]]);export{m as __pageData,h as default};
