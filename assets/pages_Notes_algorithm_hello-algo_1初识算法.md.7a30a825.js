import{_ as l,j as t,k as o,V as e}from"./chunks/framework.8d6cb2c0.js";const a="/notebook/assets/插入算法-整理扑克.dd04251b.png",i="/notebook/assets/贪心算法-货币找零.96bccea7.png",b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/Notes/algorithm/hello-algo/1初识算法.md","filePath":"pages/Notes/algorithm/hello-algo/1初识算法.md","lastUpdated":1701855414000}'),s={name:"pages/Notes/algorithm/hello-algo/1初识算法.md"},_=e('<h3 id="无处不在的算法" tabindex="-1">无处不在的算法 <a class="header-anchor" href="#无处不在的算法" aria-label="Permalink to &quot;无处不在的算法&quot;">​</a></h3><ul><li><p>[二分查找]26个字母查找某一个字母</p></li><li><p>[插入排序]整理扑克</p></li></ul><blockquote><p>无序的五张扑克牌，使其从小到大依次排列</p><ul><li>将扑克牌划分为“有序”和“无序”两部分，并假设初始状态下最左 1 张扑克牌已经有序。</li><li>在无序部分抽出一张扑克牌，插入至有序部分的正确位置；完成后最左 2 张扑克已经有序。</li><li>不断循环步骤 2. ，每一轮将一张扑克牌从无序部分插入至有序部分，直至所有扑克牌都有序。</li></ul></blockquote><p><img src="'+a+'" alt="插入算法-整理扑克"></p><ul><li>[贪心]货币找零</li></ul><blockquote><p>例子 假设我们在超市购买了 (69) 元的商品，给了收银员 (100) 元，则收银员需要找我们 (31) 元。</p><ul><li>可选项是比 (31) 元面值更小的货币，包括 (1) 元、(5) 元、(10) 元、(20) 元。</li><li>从可选项中拿出最大的 (20) 元，剩余 (31 - 20 = 11) 元。</li><li>从剩余可选项中拿出最大的 (10) 元，剩余 (11 - 10 = 1) 元。</li><li>从剩余可选项中拿出最大的 (1) 元，剩余 (1 - 1 = 0) 元。</li><li>完成找零，方案为 (20 + 10 + 1 = 31) 元。 <strong>每一步都采取当前看来最好的选择</strong></li></ul></blockquote><p><img src="'+i+'" alt="贪心算法-货币找零"></p>',7),r=[_];function p(c,n,d,u,h,m){return t(),o("div",null,r)}const k=l(s,[["render",p]]);export{b as __pageData,k as default};
