import{_ as a,o as e,c as s,V as n}from"./chunks/framework.b0d887d5.js";const m=JSON.parse('{"title":"Vue3.0","description":"","frontmatter":{},"headers":[],"relativePath":"pages/Base/vue.md"}'),t={name:"pages/Base/vue.md"},r=n(`<h1 id="vue3-0" tabindex="-1">Vue3.0 <a class="header-anchor" href="#vue3-0" aria-label="Permalink to &quot;Vue3.0&quot;">​</a></h1><h2 id="生命周期钩子函数" tabindex="-1">生命周期钩子函数 <a class="header-anchor" href="#生命周期钩子函数" aria-label="Permalink to &quot;生命周期钩子函数&quot;">​</a></h2><p>setup 创建实例前</p><p>onBeforeMount 挂载DOM前</p><p>onMount 挂载DOM后</p><p>onBeforeUpdate 更新组件前</p><p>onUpdated 更新组件后</p><p>onBeforeUnmount 卸载销毁前</p><p>onUnmounted 现在销毁后</p><h2 id="组合api-reactive函数" tabindex="-1">组合API-reactive函数 <a class="header-anchor" href="#组合api-reactive函数" aria-label="Permalink to &quot;组合API-reactive函数&quot;">​</a></h2><p>将<strong>复杂类型数据</strong>包装成一个<strong>响应式数据</strong></p><h2 id="组合api-toref函数" tabindex="-1">组合API-toRef函数 <a class="header-anchor" href="#组合api-toref函数" aria-label="Permalink to &quot;组合API-toRef函数&quot;">​</a></h2><p>将复杂数据类型的数据 解构成 单个<strong>响应式数据</strong>；</p><p>PS：解构语法 解构出来的数据 不具有响应式；</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const obj =reactive({name:&#39;xxx&#39;,age:23})</span></span>
<span class="line"><span style="color:#A6ACCD;">const name =toRef(obj,&#39;name&#39;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>使用场景</strong>：有一个响应式对象数据，在模板中仅需要其中一个数据；</p><h2 id="组合api-torefs函数" tabindex="-1">组合API-toRefs函数 <a class="header-anchor" href="#组合api-torefs函数" aria-label="Permalink to &quot;组合API-toRefs函数&quot;">​</a></h2><p>将整个对象变成响应式数据对象</p><p><strong>使用场景</strong>:将数据解构展开，使用对象中的多个或所有属性作为<strong>响应式数据</strong></p><h2 id="组合api-ref函数" tabindex="-1">组合API-ref函数 <a class="header-anchor" href="#组合api-ref函数" aria-label="Permalink to &quot;组合API-ref函数&quot;">​</a></h2><p>将<strong>简单数据类型</strong> 包装成 响应式数据</p><p>PS：<strong>修改时</strong> 必须使用**.value**; <strong>模板中</strong> 省略 <strong>.value</strong></p><h2 id="组合式api-computed-函数" tabindex="-1">组合式API-computed 函数 <a class="header-anchor" href="#组合式api-computed-函数" aria-label="Permalink to &quot;组合式API-computed 函数&quot;">​</a></h2><p><strong>支持双向绑定</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const newAge=computed(()=&gt;{</span></span>
<span class="line"><span style="color:#A6ACCD;">  	get(){</span></span>
<span class="line"><span style="color:#A6ACCD;">  	return age.value+2</span></span>
<span class="line"><span style="color:#A6ACCD;">  	}</span></span>
<span class="line"><span style="color:#A6ACCD;">  	set(value){</span></span>
<span class="line"><span style="color:#A6ACCD;">  	age.value=value</span></span>
<span class="line"><span style="color:#A6ACCD;">  	}</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="组合式api-watch函数" tabindex="-1">组合式API-watch函数 <a class="header-anchor" href="#组合式api-watch函数" aria-label="Permalink to &quot;组合式API-watch函数&quot;">​</a></h2>`,26),o=[r];function p(l,i,c,u,d,h){return e(),s("div",null,o)}const g=a(t,[["render",p]]);export{m as __pageData,g as default};
