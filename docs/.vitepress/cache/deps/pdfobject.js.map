{
  "version": 3,
  "sources": ["../../../../node_modules/pdfobject/pdfobject.js"],
  "sourcesContent": ["/**\n *  PDFObject v2.2.12\n *  https://github.com/pipwerks/PDFObject\n *  @license\n *  Copyright (c) 2008-2023 Philip Hutchison\n *  MIT-style license: http://pipwerks.mit-license.org/\n *  UMD module pattern from https://github.com/umdjs/umd/blob/master/templates/returnExports.js\n */\n\n(function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else if (typeof module === \"object\" && module.exports) {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.PDFObject = factory();\n  }\n}(this, function () {\n\n    \"use strict\";\n\n    //PDFObject is designed for client-side (browsers), not server-side (node)\n    //Will choke on undefined navigator and window vars when run on server\n    //Return boolean false and exit function when running server-side\n\n    if( typeof window === \"undefined\" || \n        window.navigator === undefined || \n        window.navigator.userAgent === undefined || \n        window.navigator.mimeTypes === undefined){ \n            return false;\n    }\n\n    let pdfobjectversion = \"2.2.12\";\n    let nav = window.navigator;\n    let ua = window.navigator.userAgent;\n\n    //Time to jump through hoops -- browser vendors do not make it easy to detect PDF support.\n\n    /*\n        IE11 still uses ActiveX for Adobe Reader, but IE 11 doesn't expose window.ActiveXObject the same way \n        previous versions of IE did. window.ActiveXObject will evaluate to false in IE 11, but \"ActiveXObject\" \n        in window evaluates to true.\n\n        MS Edge does not support ActiveX so this test will evaluate false\n    */\n    let isIE = (\"ActiveXObject\" in window);\n\n    /*\n        There is a coincidental correlation between implementation of window.promises and native PDF support in desktop browsers\n        We use this to assume if the browser supports promises it supports embedded PDFs\n        Is this fragile? Sort of. But browser vendors removed mimetype detection, so we're left to improvise\n    */\n    let isModernBrowser = (window.Promise !== undefined);\n\n    //Older browsers still expose the mimeType\n    let supportsPdfMimeType = (nav.mimeTypes[\"application/pdf\"] !== undefined);\n\n    //Safari on iPadOS doesn't report as 'mobile' when requesting desktop site, yet still fails to embed PDFs\n    let isSafariIOSDesktopMode = (  nav.platform !== undefined && \n                                    nav.platform === \"MacIntel\" && \n                                    nav.maxTouchPoints !== undefined && \n                                    nav.maxTouchPoints > 1 );\n\n    //Quick test for mobile devices.\n    let isMobileDevice = (isSafariIOSDesktopMode || /Mobi|Tablet|Android|iPad|iPhone/.test(ua));\n\n    //Safari desktop requires special handling \n    let isSafariDesktop = ( !isMobileDevice && \n                            nav.vendor !== undefined && \n                            /Apple/.test(nav.vendor) && \n                            /Safari/.test(ua) );\n    \n    //Firefox started shipping PDF.js in Firefox 19. If this is Firefox 19 or greater, assume PDF.js is available\n    let isFirefoxWithPDFJS = (!isMobileDevice && /irefox/.test(ua) && ua.split(\"rv:\").length > 1) ? (parseInt(ua.split(\"rv:\")[1].split(\".\")[0], 10) > 18) : false;\n\n\n    /* ----------------------------------------------------\n       Supporting functions\n       ---------------------------------------------------- */\n\n    let createAXO = function (type){\n        var ax;\n        try {\n            ax = new ActiveXObject(type);\n        } catch (e) {\n            ax = null; //ensure ax remains null\n        }\n        return ax;\n    };\n\n    //If either ActiveX support for \"AcroPDF.PDF\" or \"PDF.PdfCtrl\" are found, return true\n    //Constructed as a method (not a prop) to avoid unneccesarry overhead -- will only be evaluated if needed\n    let supportsPdfActiveX = function (){ return !!(createAXO(\"AcroPDF.PDF\") || createAXO(\"PDF.PdfCtrl\")); };\n\n    //Determines whether PDF support is available\n    let supportsPDFs = (\n        //As of Sept 2020 no mobile browsers properly support PDF embeds\n        !isMobileDevice && (\n            //We're moving into the age of MIME-less browsers. They mostly all support PDF rendering without plugins.\n            isModernBrowser ||\n            //Modern versions of Firefox come bundled with PDFJS\n            isFirefoxWithPDFJS ||\n            //Browsers that still support the original MIME type check\n            supportsPdfMimeType ||\n            //Pity the poor souls still using IE\n            (isIE && supportsPdfActiveX())\n        )\n    );\n\n    //Create a fragment identifier for using PDF Open parameters when embedding PDF\n    let buildURLFragmentString = function(pdfParams){\n\n        let string = \"\";\n        let prop;\n\n        if(pdfParams){\n\n            for (prop in pdfParams) {\n                if (pdfParams.hasOwnProperty(prop)) {\n                    string += encodeURIComponent(prop) + \"=\" + encodeURIComponent(pdfParams[prop]) + \"&\";\n                }\n            }\n\n            //The string will be empty if no PDF Params found\n            if(string){\n\n                string = \"#\" + string;\n\n                //Remove last ampersand\n                string = string.slice(0, string.length - 1);\n\n            }\n\n        }\n\n        return string;\n\n    };\n\n    let embedError = function (msg, suppressConsole){\n        if(!suppressConsole){\n            console.log(\"[PDFObject] \" + msg);\n        }\n        return false;\n    };\n\n    let emptyNodeContents = function (node){\n        while(node.firstChild){\n            node.removeChild(node.firstChild);\n        }\n    };\n\n    let getTargetElement = function (targetSelector){\n\n        //Default to body for full-browser PDF\n        let targetNode = document.body;\n\n        //If a targetSelector is specified, check to see whether\n        //it's passing a selector, jQuery object, or an HTML element\n\n        if(typeof targetSelector === \"string\"){\n\n            //Is CSS selector\n            targetNode = document.querySelector(targetSelector);\n\n        } else if (window.jQuery !== undefined && targetSelector instanceof jQuery && targetSelector.length) {\n\n            //Is jQuery element. Extract HTML node\n            targetNode = targetSelector.get(0);\n\n        } else if (targetSelector.nodeType !== undefined && targetSelector.nodeType === 1){\n\n            //Is HTML element\n            targetNode = targetSelector;\n\n        }\n\n        return targetNode;\n\n    };\n\n    let generatePDFObjectMarkup = function (embedType, targetNode, url, pdfOpenFragment, width, height, id, title, omitInlineStyles, customAttribute, PDFJS_URL){\n\n        //Ensure target element is empty first\n        emptyNodeContents(targetNode);\n\n        let source = url;\n\n        if(embedType === \"pdfjs\"){ \n            //If PDFJS_URL already contains a ?, assume querystring is in place, and use an ampersand to append PDFJS's file parameter\n            let connector = (PDFJS_URL.indexOf(\"?\") !== -1) ? \"&\" : \"?\"; \n            source = PDFJS_URL + connector + \"file=\" + encodeURIComponent(url) + pdfOpenFragment;\n        } else {\n            source += pdfOpenFragment;\n        }\n\n        let el_type = (embedType === \"pdfjs\" || embedType === \"iframe\") ? \"iframe\" : \"embed\";\n        let el = document.createElement(el_type);\n\n        el.className = \"pdfobject\";\n        el.type = \"application/pdf\";\n        el.title = title;\n        el.src = source;\n\n        if(id){\n            el.id = id;\n        }\n\n        if(el_type === \"iframe\"){\n            el.allow = \"fullscreen\";\n            el.frameborder = \"0\";\n        }\n\n        if(!omitInlineStyles){\n\n            let style = (el_type === \"embed\") ? \"overflow: auto;\" : \"border: none;\";\n\n            if(targetNode !== document.body){\n                //assign width and height to target node\n                style += \"width: \" + width + \"; height: \" + height + \";\";\n            } else {\n                //this is a full-page embed, use CSS to fill the viewport\n                style += \"position: absolute; top: 0; right: 0; bottom: 0; left: 0; width: 100%; height: 100%;\";\n            }\n\n            el.style.cssText = style; \n\n        }\n\n        //Allow developer to insert custom attribute on embed/iframe element, but ensure it does not conflict with attributes used by PDFObject\n        let reservedTokens = [\"className\", \"type\", \"title\", \"src\", \"style\", \"id\", \"allow\", \"frameborder\"];\n        if(customAttribute && customAttribute.key && reservedTokens.indexOf(customAttribute.key) === -1){\n            el.setAttribute(customAttribute.key, (typeof customAttribute.value !== \"undefined\") ? customAttribute.value : \"\");\n        }\n\n        targetNode.classList.add(\"pdfobject-container\");\n        targetNode.appendChild(el);\n\n        return targetNode.getElementsByTagName(el_type)[0];\n\n    };\n\n    let embed = function(url, targetSelector, options){\n\n        //If targetSelector is not defined, convert to boolean\n        let selector = targetSelector || false;\n\n        //Ensure options object is not undefined -- enables easier error checking below\n        let opt = options || {};\n\n        //Get passed options, or set reasonable defaults\n        let id = (typeof opt.id === \"string\") ? opt.id : \"\";\n        let page = opt.page || false;\n        let pdfOpenParams = opt.pdfOpenParams || {};\n        let fallbackLink = (typeof opt.fallbackLink === \"string\" || typeof opt.fallbackLink === \"boolean\") ? opt.fallbackLink : true;\n        let width = opt.width || \"100%\";\n        let height = opt.height || \"100%\";\n        let title = opt.title || \"Embedded PDF\";\n        let assumptionMode = (typeof opt.assumptionMode === \"boolean\") ? opt.assumptionMode : true;\n        let forcePDFJS = (typeof opt.forcePDFJS === \"boolean\") ? opt.forcePDFJS : false;\n        let supportRedirect = (typeof opt.supportRedirect === \"boolean\") ? opt.supportRedirect : false;\n        let omitInlineStyles = (typeof opt.omitInlineStyles === \"boolean\") ? opt.omitInlineStyles : false;\n        let suppressConsole = (typeof opt.suppressConsole === \"boolean\") ? opt.suppressConsole : false;\n        let forceIframe = (typeof opt.forceIframe === \"boolean\") ? opt.forceIframe : false;\n        let PDFJS_URL = opt.PDFJS_URL || false;\n        let targetNode = getTargetElement(selector);\n        let fallbackHTML = \"\";\n        let pdfOpenFragment = \"\";\n        let customAttribute = opt.customAttribute || {};\n        let fallbackHTML_default = \"<p>This browser does not support inline PDFs. Please download the PDF to view it: <a href='[url]'>Download PDF</a></p>\";\n\n        //Ensure URL is available. If not, exit now.\n        if(typeof url !== \"string\"){ return embedError(\"URL is not valid\", suppressConsole); }\n\n        //If target element is specified but is not valid, exit without doing anything\n        if(!targetNode){ return embedError(\"Target element cannot be determined\", suppressConsole); }\n\n        //page option overrides pdfOpenParams, if found\n        if(page){ pdfOpenParams.page = page; }\n\n        //Stringify optional Adobe params for opening document (as fragment identifier)\n        pdfOpenFragment = buildURLFragmentString(pdfOpenParams);\n\n\n        // --== Do the dance: Embed attempt #1 ==--\n\n        //If the forcePDFJS option is invoked, skip everything else and embed as directed\n        if(forcePDFJS && PDFJS_URL){\n            return generatePDFObjectMarkup(\"pdfjs\", targetNode, url, pdfOpenFragment, width, height, id, title, omitInlineStyles, customAttribute, PDFJS_URL);\n        }\n \n        // --== Embed attempt #2 ==--\n\n        //Embed PDF if traditional support is provided, or if this developer is willing to roll with assumption\n        //that modern desktop (not mobile) browsers natively support PDFs \n        if(supportsPDFs || (assumptionMode && !isMobileDevice)){\n            \n            //Should we use <embed> or <iframe>? In most cases <embed>. \n            //Allow developer to force <iframe>, if desired\n            //There is an edge case where Safari does not respect 302 redirect requests for PDF files when using <embed> element.\n            //Redirect appears to work fine when using <iframe> instead of <embed> (Addresses issue #210)\n            //Forcing Safari desktop to use iframe due to freezing bug in macOS 11 (Big Sur)\n            let embedtype = (forceIframe || supportRedirect || isSafariDesktop) ? \"iframe\" : \"embed\";\n            \n            return generatePDFObjectMarkup(embedtype, targetNode, url, pdfOpenFragment, width, height, id, title, omitInlineStyles, customAttribute);\n\n        }\n        \n        // --== Embed attempt #3 ==--\n        \n        //If everything else has failed and a PDFJS fallback is provided, try to use it\n        if(PDFJS_URL){\n            return generatePDFObjectMarkup(\"pdfjs\", targetNode, url, pdfOpenFragment, width, height, id, title, omitInlineStyles, customAttribute, PDFJS_URL);\n        }\n        \n        // --== PDF embed not supported! Use fallback ==-- \n\n        //Display the fallback link if available\n        if(fallbackLink){\n\n            fallbackHTML = (typeof fallbackLink === \"string\") ? fallbackLink : fallbackHTML_default;\n            targetNode.innerHTML = fallbackHTML.replace(/\\[url\\]/g, url);\n\n        }\n\n        return embedError(\"This browser does not support embedded PDFs\", suppressConsole);\n\n    };\n\n    return {\n        embed: function (a,b,c){ return embed(a,b,c); },\n        pdfobjectversion: (function () { return pdfobjectversion; })(),\n        supportsPDFs: (function (){ return supportsPDFs; })()\n    };\n\n}));\n"],
  "mappings": "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",
  "names": []
}
